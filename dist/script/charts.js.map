{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack:///../../../../../src/.internal/charts/types/RadarChart.ts","webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts","webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts","webpack:///../../../../../src/.internal/charts/types/SlicedChart.ts","webpack:///../../../../../src/.internal/charts/elements/FlowDiagramNode.ts","webpack:///../../../../../src/.internal/charts/elements/FlowDiagramLink.ts","webpack:///../../../../../src/.internal/charts/types/FlowDiagram.ts","webpack:///../../../../../src/.internal/charts/elements/LabelBullet.ts","webpack:///../../../../../src/.internal/charts/elements/SankeyNode.ts","webpack:///../../../../../src/.internal/charts/elements/SankeyLink.ts","webpack:///../../../../../src/.internal/charts/types/SankeyDiagram.ts","webpack:///../../../../../src/.internal/charts/elements/ChordNode.ts","webpack:///../../../../../src/.internal/core/elements/QuadraticCurve.ts","webpack:///../../../../../src/.internal/charts/elements/ChordLink.ts","webpack:///../../../../../src/.internal/charts/types/ChordDiagram.ts","webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack:///../../../../../src/.internal/charts/types/TreeMap.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///../../../../../src/.internal/charts/elements/Column3D.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts","webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts","webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack:///../../../../../src/.internal/charts/elements/OHLC.ts","webpack:///../../../../../src/.internal/charts/series/OHLCSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack:///../../../../../src/.internal/charts/elements/FunnelSlice.ts","webpack:///../../../../../src/.internal/charts/elements/FunnelTick.ts","webpack:///../../../../../src/.internal/charts/series/FunnelSeries.ts","webpack:///../../../../../src/.internal/charts/series/PyramidSeries.ts","webpack:///../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts","webpack:///../../../../../src/.internal/charts/elements/CurvedColumn.ts","webpack:///../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack:///../../../../../src/.internal/charts/elements/ErrorBullet.ts","webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack:///./charts.js"],"names":["RadarSeries_RadarSeriesDataItem","_super","RadarSeriesDataItem","_this","call","this","className","setLocation","applyTheme","Object","tslib_es6","LineSeries","RadarSeries_RadarSeries","RadarSeries","connectEnds","prototype","validate","chart","invalid","createDataItem","getPoint","dataItem","xKey","yKey","locationX","locationY","stackKeyX","stackKeyY","x","yAxis","getX","y","getY","radius","utils_Math","angle","xAxis","getAngle","startAngle","endAngle","addPoints","points","xField","yField","backwards","point","locations","push","getMaskPath","renderer","Path","pixelRadius","pixelInnerRadius","drawSegment","segment","closePoints","Math","abs","dataFields","_xOpenField","_yOpenField","stacked","length","unshift","defineProperty","getPropertyValue","value","setPropertyValue","positionBulletReal","bullet","positionX","positionY","start","end","visible","moveTo","positionToPoint","setXAxis","axis","updateRendererRefs","setYAxis","rendererX","rendererY","axisRendererY","Registry","registeredClasses","AxisFillCircular_AxisFillCircular","AxisFillCircular","element","paper","add","Percent","draw","__disabled","disabled","fillPath","getPositionRangePath","startPosition","endPosition","Type","innerRadius","cornerRadius","path","setPercentProperty","AxisFill","GridCircular_GridCircular","GridCircular","pixelPerfect","Grid","AxisRendererCircular_AxisRendererCircular","AxisRendererCircular","pixelRadiusReal","layout","isMeasured","useChartAngles","grid","template","location","labels","ticks","tooltipLocation","line","strokeOpacity","setAxis","tooltip","adapter","target","Utils","pixelX","pixelY","cos","atan2","sin","PI","invalidate","mr","max","min","plotContainer","innerHeight","innerWidth","innerRadiusModifyer","position","position2","coordinate","positionToCoordinate","axisLength","realRadius","Infinity","positionToAngle","arc","inversed","angleToPosition","updateAxisLine","updateGridElement","gridInnerRadius","zIndex","toggleVisibility","updateTickElement","tick","tickLength","inside","updateBullet","AxisBullet","positionItem","updateLabelElement","label","fixPosition","minLabelPosition","maxLabelPosition","fitsToBounds","invalidateAxisItems","invalidateSeries","createGrid","createFill","createLabel","AxisLabelCircular","pointToPosition","coordinateToPosition","AxisRenderer","AxisRendererRadial_AxisRendererRadial","AxisRendererRadial","_chart","Disposer","minGridDistance","gridType","axisAngle","horizontalCenter","_disposers","title","valign","verticalCenter","rotation","opposite","xAxes","getIndex","count","series","dataItems","CategoryAxis","gridLocation","i","cellEndLocation","updateBaseGridElement","updateBreakElement","axisBreak","startLine","endLine","fillShape","startPoint","endPoint","createBreakSprites","WavedCircle","updateTooltip","tooltipOrientation","width","bigNum","height","round","axisFullLength","get","set","AxisRendererY","RadarChart_RadarChartDataItem","RadarChartDataItem","XYChart","RadarChart_RadarChart","RadarChart","_axisRendererX","_axisRendererY","radarContainer","createChild","Container","shouldClone","align","seriesContainer","parent","bulletsContainer","axisBulletsContainer","_cursorContainer","chartContainer","events","on","_bulletMask","Circle","opacity","applyInternalDefaults","readerTitle","language","translate","processAxis","gridContainer","breakContainer","toBack","handleXAxisRangeChange","Iterator","yAxes","iterator","handleYAxisRangeChange","processConfig","config","cursor","type","len","beforeDraw","rect","innerRect","wr","hr","maxRadius","diameter","_pixelInnerRadius","definedBBox","validatePosition","createSeries","updateXAxis","processRenderer","updateYAxis","ClockHand_ClockHand","ClockHand","_axis","interfaceColors","InterfaceColorSet","fill","getFor","stroke","pin","startWidth","endWidth","hand","Trapezoid","pixelWidth","h","leftSide","rightSide","x0","x1","_pin","removeDispose","_hand","showValue","duration","easing","_value","undefined","newAngle","anyToPosition","currentAngle","rotationDirection","animate","property","to","updateValue","map","hasKey","getKey","GaugeChart_GaugeChartDataItem","GaugeChartDataItem","GaugeChart_GaugeChart","GaugeChart","hands","List","processHand","event","newValue","configOrder","a","b","PieSeries3D_PieSeries3DDataItem","PieSeries3DDataItem","values","depthValue","setValue","PieSeries","PieSeries3D_PieSeries3D","PieSeries3D","createSlice","Slice3D","validateDataElement","slice","depth","depthPercent","percent","_workingStartIndex","_workingEndIndex","toFront","positionBullet","PieChart3D_PieChart3DDataItem","PieChart3DDataItem","PieChart","PieChart3D_PieChart3D","PieChart3D","invalidateDataUsers","SlicedChart_SlicedChartDataItem","SlicedChartDataItem","PercentChart","SlicedChart_SlicedChart","SlicedChart","padding","FlowDiagramNode_FlowDiagramNode","FlowDiagramNode","legendSettings","Legend","draggable","inert","setStateOnChildren","invalidateLinks","handleHit","isHidden","isHiding","show","hide","animation","outgoingDataItems","each","toNode","setWorkingValue","getValue","link","incomingDataItems","fromNode","isDisposed","colorMode","color","gradient","stop_1","stops","stop_2","_incomingDataItems","sortBy","_incomingSorted","utils_String","fromName","Order","utils_Number","_outgoingDataItems","_outgoingSorted","setColorProperty","_background","createLegendMarker","marker","w","pixelHeight","removeChildren","column","RoundedRectangle","utils_Object","Sprite","copyFrom","legendDataItem","colorOrig","_legendDataItem","itemContainer","deepInvalidate","FlowDiagramLink_FlowDiagramLink","FlowDiagramLink","maskBullets","tooltipText","setElement","fillOpacity","positionBullets","bullets","maxWidth","maxHeight","_bulletsContainer","_bulletsMask","bulletsMask","middleLine","rotationField","propertyFields","dataContext","clear","Color","addColor","setFill","_gradient","measureElement","_bullets","Bullet","source","Line","Polyline","getTooltipX","getTooltipY","LinearGradient","FlowDiagram_FlowDiagramDataItem","FlowDiagramDataItem","properties","setProperty","toName","_link","link_1","component","links","create","addSprite","removeValue","Chart","FlowDiagram_FlowDiagram","FlowDiagram","colors","ColorSet","nodePadding","sequencedInterpolation","step","minNodeSize","linksContainer","nodesContainer","dispose","validateData","_parseDataFrom","nodes","sortNodes","reset","low","high","sum","node","name","strokeModifier","LinearGradientModifier","opacities","fillModifier","key","setCalculatedValue","strNode","next","getNodeValue","feedLegend","handleDataItemWorkingValueChange","_sorted","sortedIterator","total","incomingTotal","outgoingTotal","getWorkingValue","totalIncoming","totalOutgoing","changeSorting","_nodes","createNode","Dictionary","_links","createLink","legend","legendData_1","data","disposeData","LabelBullet_LabelBullet","LabelBullet","Label","truncate","hideOversized","handleMaxSize","SankeyNode_SankeyNode","SankeyNode","nextInCoord","nextOutCoord","nameLabel","text","valueLabel","hiddenState","background","orientation_1","orientation","dx","dy","endX","endY","linkWidth","valueHeight","startX","startY","measuredWidth","measuredHeight","SankeyLink_SankeyLink","SankeyLink","tension","controlPointDistance","Polyspline","makeBackwards","states","setState","isTemplate","y0","y1","_a","_b","_c","_d","xt0","yt0","xt1","yt1","xb0","xb1","yb0","yb1","xm0","xm1","ym0","ym1","index","tensionX","tensionY","minX","minY","maxX","maxY","_bbox","cpd","kxt0","kyt0","kxt1","kyt1","kxm0","kym0","kxm1","kym1","kxb0","kyb0","kxb1","kyb1","segments","Smoothing","smooth","mask","SankeyDiagram_SankeyDiagramDataItem","SankeyDiagramDataItem","SankeyDiagram_SankeyDiagram","SankeyDiagram","nodeAlign","_valueHeight","_levelCount","level","getNodeLevel","levels","_counter","checkLoop","apply","calculateValueHeight","_levelSum","_levelNodesCount","maxSum","availableHeight","maxSumLevel","minHeight","realValue","levelNodeCount","_maxSumLevel","maxSumLevelNodeCount","finalHeight","_heightAnimation","animationOptions","err","interpolationDuration","transitionDuration","Animation","from","interpolationEasing","container","nextCoordinate","delta","levelCoordinate","nodeCount","showReal","preventShow","container_1","i_1","delay","sequencedInterpolationDelay","isFinished","nodeHeight","ChordNode_ChordNode","ChordNode","updateRotation","Slice","tooltipX","ix","tooltipY","iy","arc_1","sliceStartAngle_1","children","child","childAngle","childRadius","labelAngle","adjustedTotal","nextAngle","nonRibbon","percentWidth","valueAngle","mAngle","trueStartAngle","tx","ty","QuadraticCurve_QuadraticCurve","QuadraticCurve","x2","y2","cpx","cpy","p1","p2","cp","d","point1","point2","ChordLink_ChordLink","ChordLink","fromX","fromY","toX","toY","mAngle1","mAngle2","ChordDiagram_ChordDiagramDataItem","ChordDiagramDataItem","ChordDiagram_ChordDiagram","ChordDiagram","chordContainer","newTotal","invalidateLayout","TreeMapSeries_TreeMapSeriesDataItem","TreeMapSeriesDataItem","treeMapDataItem","_dataContext","toValue","fields","ColumnSeries","TreeMapSeries_TreeMapSeries","TreeMapSeries","minBulletDistance","columns","configField","openValueX","valueX","openValueY","valueY","showOnInit","processDataItem","seriesDataItem","defaultState","hideReal","processValues","getStartLocation","getEndLocation","dataChangeUpdate","disableUnusedColumns","TreeMap_TreeMapDataItem","TreeMapDataItem","rows","workingValue","hasChildren","getDuration","childValue","_series","TreeMap_TreeMap","TreeMap","layoutAlgorithm","squarify","zoomable","_usesData","maxLevels","currentLevel","hideParentColumns","sorting","ValueAxis","strictMinMax","xRenderer","axisFills","baseGrid","yRenderer","seriesTemplates","virtualParent","zoomOutButton","zoomToChartDataItem","_homeDataItem","_navigationBar","navigationBar","createTreeSeries","_tempSeries","homeDataItem","clone","_homeText","getMinMax","layoutItems","sort","_updateDataItemIndexes","navigationData","parentDataItem","initSeries","reverse","createTreeSeriesReal","utils_Array","indexOf","setData","currentlyZoomed","seriesAppeared","toString","dataUsers","columnsContainer","remove","cursorOverStyle","Mouse","pointer","zoomToSeriesDataItem","toggleBullets","zoomToValues","rangeChangeAnimation","_dataDisposers","once","binaryTree","dice","sliceDice","validateLayout","validateDataItems","validateRawData","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","sqrt","i0","i1","row","handleSeriesAdded2","handleDataItemValueChange","invalidateDataItems","getLegendLevel","handleLegendSeriesAdded","legendParent","getExporting","exporting","info","format","AxisRendererX3D_AxisRendererX3D","AxisRendererX3D","dx3D","dy3D","getHeight","handle3DChanged","AxisRendererX","AxisRendererY3D_AxisRendererY3D","AxisRendererY3D","getWidth","Column3D_Column3D","Column3D","createAssets","column3D","Rectangle3D","Column","ColumnSeries3D_ColumnSeries3DDataItem","ColumnSeries3DDataItem","ColumnSeries3D_ColumnSeries3D","ColumnSeries3D","applyOnClones","leftAxesContainer","rightAxesContainer","bottomAxesContainer","topAxesContainer","_columnsContainer","validateDataElementReal","validateDataElements","createColumnTemplate","XYChart3D_XYChart3DDataItem","XYChart3DDataItem","XYChart3D_XYChart3D","XYChart3D","updateSeriesMasks","fixLayout","fixColumns","paddingTop","paddingRight","scrollbarX","scrollbarY","clustered","depthIndex","s","inversed_1","baseAxis","maskColumns","Candlestick_Candlestick","Candlestick","lowLine","highLine","CandlestickSeries_CandlestickSeriesDataItem","CandlestickSeriesDataItem","lowValueX","lowValueY","highValueX","highValueY","CandlestickSeries_CandlestickSeries","CandlestickSeries","groupFields","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateCandlestick","lowLine_1","highLine_1","open_1","yOpenField","close_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","xOpenField","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","axisRanges","axisRange","rangeColumn","rangesColumns","uid","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","defineFields","yAxisFieldName","axisFieldName","xAxisFieldName","addValueField","_xValueFields","_yValueFields","cw","ch","OHLC_OHLC","OHLC","openLine","highLowLine","closeLine","OHLCSeries_OHLCSeriesDataItem","OHLCSeriesDataItem","OHLCSeries_OHLCSeries","OHLCSeries","openLine_1","highLowLine_1","closeLine_1","rangeOpenLine","rangeCloseLine","rangeHighLowLine","StepLineSeriesSegment_StepLineSeriesSegment","StepLineSeriesSegment","smoothnessX","smoothnessY","noRisers","vertical","strokeSprite","fillSprite","LineSeriesSegment","StepLineSeries_StepLineSeriesDataItem","StepLineSeriesDataItem","StepLineSeries_StepLineSeries","StepLineSeries","startLocation","endLocation","startLocationX","endLocationX","startLocationY","endLocationY","getAdjustedXLocation","prevPoint","point0","createSegment","RadarColumn_RadarColumn","RadarColumn","radarColumn","RadarColumnSeries_RadarColumnSeriesDataItem","RadarColumnSeriesDataItem","RadarColumnSeries_RadarColumnSeries","RadarColumnSeries","lAngle","rAngle","tRadius","bRadius","cellAngle","setColumnStates","offset","temp","contents","sprites","setKey","FunnelSlice_FunnelSlice","FunnelSlice","bottomWidth","topWidth","expandDistance","pt","pixelPaddingTop","pb","pixelPaddingBottom","pr","pixelPaddingRight","pl","pixelPaddingLeft","ed","tl","tw","tr","br","bw","bl","cpr","cpl","qp1","qp2","tickPoint","tt","tb","bt","bb","mlx","mty","FunnelTick_FunnelTick","FunnelTick","_label","_slice","p0","labelsOpposite","maxRight","maxBottom","Tick","FunnelSeries_FunnelSeriesDataItem","FunnelSeriesDataItem","_sliceLink","sliceLink_1","sliceLinks","slicesContainer","PercentSeries","FunnelSeries_FunnelSeries","FunnelSeries","_nextY","labelsContainer","bottomRatio","createTick","initSlice","scale","observe","handleSliceScale","handleSliceMove","initLabel","labelTemplate","alignLabels","interactionsEnabled","dItem","ignoreZeroValues","_total","_count","arrangeLabels","getNextValue","nextValue","nextItem","formDataElement","sliceLink","decorateSlice","sprite","linkHeight","getLastLabel","lastLabel","lastY","lastX","_sliceLinks","startIndex","endIndex","Options","animationsEnabled","setAlignLabels","margin","labelAlign","labelValign","PyramidSeries_PyramidSeriesDataItem","PyramidSeriesDataItem","PyramidSeries_PyramidSeries","PyramidSeries","pyramidHeight","valueIs","_nextWidth","relValue","_pyramidHeight","_pyramidWidth","ticksContainer","absoluteSum","pyramidWidth","sliceTopWidth","c","tan","sliceHeight","sliceBottomWidth","square","sliceWidth","PictorialStackedSeries_PictorialStackedSeriesDataItem","PictorialStackedSeriesDataItem","PictorialStackedSeries_PictorialStackedSeries","PictorialStackedSeries","_maskSprite","maskSprite","pictureWidth","pictureHeight","newWidth","newHeight","slices","hs","ConeColumn_ConeColumn","ConeColumn","coneColumn","Cone","ConeSeries_ConeSeriesDataItem","ConeSeriesDataItem","ConeSeries_ConeSeries","ConeSeries","CurvedColumn_CurvedColumn","CurvedColumn","curvedColumn","realWidth","realHeight","realX","realY","CurvedColumnSeries_CurvedColumnSeriesDataItem","CurvedColumnSeriesDataItem","CurvedColumnSeries_CurvedColumnSeries","CurvedColumnSeries","CircleBullet_CircleBullet","CircleBullet","circle","ErrorBullet_ErrorBullet","ErrorBullet","errorLine","isDynamic","NavigationBar_NavigationBarDataItem","NavigationBarDataItem","DataItem","NavigationBar_NavigationBar","NavigationBar","textLink","TextLink","paddingBottom","_linksIterator","createNewItems","triangle","Triangle","direction","marginLeft","marginRight","separators","activeLink","fontWeight","getLast","separator","Component","RadarCursor_RadarCursor","RadarCursor","truePixelRadius","triggerMoveReal","force","cursorTooltipEnabled","updateLineX","updateLineY","updateSelection","lineX","fullWidthLineX","currentItemStartPoint","currentItemEndPoint","fillStartAngle","lineY","fullWidthLineY","_usesSelection","downPoint","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","behavior","selection","getPositions","xPosition","yPosition","updatePoint","handleXTooltipPosition","handleYTooltipPosition","updateLinePositions","getRanges","upPoint","upAngle","upRadius","xRange","yRange","updateSize","fixPoint","XYCursor","window","am4charts","charts_namespaceObject"],"mappings":"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","file":"charts.js","sourcesContent":["/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n//import { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\n//import { Sprite } from \"../../core/Sprite\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\t// hack to be able to determine angle later\r\n\t\tif (radius == 0) {\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param segment      [description]\r\n\t * @param points       [description]\r\n\t * @param closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n\r\n\tprotected positionBulletReal(bullet:Sprite, positionX:number, positionY:number){\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif(positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end){\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\t\r\n\t\tbullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\t\t\r\n\t}\r\n\r\n\r\n\tprotected setXAxis(axis: Axis) {\r\n\t\tsuper.setXAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected setYAxis(axis: Axis) {\r\n\t\tsuper.setYAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected updateRendererRefs() {\r\n\t\tlet rendererX = <AxisRendererCircular>this.xAxis.renderer;\r\n\t\tlet rendererY = <AxisRendererRadial>this.yAxis.renderer;\r\n\r\n\t\trendererX.axisRendererY = rendererY;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { Axis } from \"./Axis\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tif(this.__disabled || this.disabled){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { AxisRendererRadial } from \"./AxisRendererRadial\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\r\n\t/**\r\n\t * Y axis renderer\r\n\t */\r\n\tpublic axisRendererY: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\tlet chart = <RadarChart>this.chart;\t\t\r\n\t\tlet innerRadius = this.getPropertyValue(\"innerRadius\");\r\n\t\tif(chart){\r\n\t\t\tif (!$type.hasValue(innerRadius)) {\r\n\t\t\t\tinnerRadius = chart.innerRadius;\r\n\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tinnerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100)\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tlet mr = chart.mr;\r\n\t\t\t\t\tlet value = innerRadius.value;\r\n\t\t\t\t\tvalue = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\r\n\t\t\t\t\tinnerRadius = percent(value * 100);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn innerRadius;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\r\n\t\tif (!$type.isNumber(position2)) {\r\n\t\t\tposition2 = 1;\r\n\t\t}\r\n\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\tlet radius = this.pixelRadius;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (this.axisRendererY) {\r\n\t\t\tlet realRadius = $math.fitToRange(this.axisRendererY.positionToCoordinate(position2), 0, Infinity)\r\n\r\n\t\t\tif(realRadius == 0){\r\n\t\t\t\trealRadius = 0.000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet point = { x: realRadius * $math.cos(angle), y: realRadius * $math.sin(angle) };\r\n\t\t\treturn point;\r\n\t\t}\r\n\r\n\t\treturn { x: $math.cos(angle) * innerRadius + (radius - innerRadius) * $math.cos(angle) * position2, y: $math.sin(angle) * innerRadius + (radius - innerRadius) * $math.sin(angle) * position2 };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts angle on axis to relative position(0-1).\r\n\t *\r\n\t * @param angle Angle in degrees\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic angleToPosition(angle: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\t\tlet position: number\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tposition = axis.end - (angle - this.startAngle) / arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tposition = (angle - this.startAngle) / arc + axis.start;\r\n\t\t}\r\n\r\n\t\treturn $math.round(position, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = $math.min(360, endAngle - startAngle);\t\t\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif ($type.isNumber(point.x) && $type.isNumber(point.y) && grid.element) {\r\n\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadiusReal, true);\r\n\r\n\t\t\tif(!$type.isNumber(innerRadius)){\r\n\t\t\t\tinnerRadius = 0;\r\n\t\t\t}\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\r\n\t\tpoint = { x: radius * $math.cos(angle), y: radius * $math.sin(angle) }\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlabel.fixPosition(this.positionToAngle(position), this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\r\n\t\treturn this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _chartType: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false)\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\tlet chart = this.chart;\r\n\t\tlet innerRadius = this.getPropertyValue(\"innerRadius\");\r\n\t\tif(chart){\r\n\t\t\tif (!$type.hasValue(innerRadius)) {\r\n\t\t\t\tinnerRadius = chart.innerRadius;\r\n\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tinnerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100)\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tlet mr = chart.mr;\r\n\t\t\t\t\tlet value = innerRadius.value;\r\n\t\t\t\t\tvalue = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\r\n\t\t\t\t\tinnerRadius = percent(value * 100);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn innerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet chart = this.chart;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element && chart) {\r\n\t\t\t\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = 0;\r\n\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\tif (series) {\r\n\t\t\t\tcount = series.dataItems.length;\r\n\t\t\t}\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.path = path;\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angle here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\tlet count = 0;\r\n\t\tif (series) {\r\n\t\t\tcount = series.dataItems.length;\r\n\t\t}\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick      Tick element\r\n\t * @param position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet coordinate = ($math.getDistance(point) - this.pixelInnerRadius);\r\n\t\treturn this.coordinateToPosition(coordinate);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: RadarChart) {\r\n\t\tthis._chart.set(value, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\t\r\n\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { RadarColumnSeries } from \"../series/RadarColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: RadarSeries | RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic mr: number = 1;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\t\tthis.axisBulletsContainer = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.invalidate, this, false); // need this for the chart to change radius if legend is removed/disabled\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tsuper.handleXAxisRangeChange();\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tsuper.handleYAxisRangeChange();\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\r\n\t\t\tthis.mr = mr;\r\n\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif (axis.renderer.useChartAngles) {\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\t//axis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\t//axis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.radarContainer.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"counterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param value     New value\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns hand's relative position on axis\r\n\t */\r\n\tpublic get currentPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\treturn renderer.angleToPosition(this.rotation);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this, false);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"hands\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"hands\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = this._workingStartIndex; i < this._workingEndIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tconst startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice = dataItem.slice;\r\n\r\n\t\tbullet.y = bullet.pixelY - slice.depth;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tif (this.setPropertyValue(\"depth\", value)) {\r\n\t\t\tthis.invalidateDataUsers();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees. Possible range 0 - 90.\r\n\t *\r\n\t * @default 10\r\n\t * @param value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tvalue = $math.fitToRange(value, 0, 90);\r\n\t\tif (this.setPropertyValue(\"angle\", value)) {\r\n\t\t\tthis.invalidateDataUsers();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts","/**\r\n * Sliced chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { FunnelSeries } from \"../series/FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SlicedChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SlicedChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SlicedChart]]\r\n */\r\nexport interface ISlicedChartProperties extends IPercentChartProperties { }\r\n\r\n/**\r\n * Defines events for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SlicedChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlicedChartAdapters extends IPercentChartAdapters, ISlicedChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class SlicedChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISlicedChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISlicedChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISlicedChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISlicedChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: FunnelSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChart\";\r\n\r\n\t\tthis.seriesContainer.layout = \"horizontal\";\r\n\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sliced chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\r\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/SlicedChart.ts","/**\r\n * FlowDiagramNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, AMEvent, visualProperties, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { FlowDiagram, FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendSettings, LegendDataItem } from \"../Legend\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Name of the node.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * Sum of all incomming+outgoing link values\r\n\t */\r\n\ttotal?: number;\r\n\r\n\t/**\r\n\t * Sum of all incoming link values\r\n\t */\r\n\ttotalIncoming?: number;\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values\r\n\t */\r\n\ttotalOutgoing?: number;\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t */\r\n\tcolor?: Color;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramNodeAdapters extends IContainerAdapters, IFlowDiagramNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Flow Diagram.\r\n *\r\n * A Flow node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[FlowLink]] elements.\r\n *\r\n * @see {@link IFlowDiagramNodeEvents} for a list of available events\r\n * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramNode extends Container {\r\n\r\n\t/**\r\n\t * total ajusted taken in mind chart.minNodeSize\r\n\t */\r\n\tpublic adjustedTotal: number;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: FlowDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[FlowDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Settings for the appearance of the related legend items.\r\n\t */\r\n\tpublic legendSettings: LegendSettings = new LegendSettings();\r\n\r\n\r\n\t/**\r\n\t * A reference to the legend data item related to this node.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramNode\";\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.draggable = true;\r\n\t\tthis.inert = true;\r\n\r\n\t\tthis.setStateOnChildren = true;\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.invalidateLinks, this, false);\r\n\t\tthis.events.on(\"sizechanged\", this.invalidateLinks, this, false);\r\n\t\t//this.events.on(\"hit\", this.handleHit, this, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleHit(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tif (this.isHidden || this.isHiding) {\r\n\t\t\tthis.show();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.hide();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden node.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.toNode || (dataItem.toNode && !dataItem.toNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t\tdataItem.link.show();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.fromNode || (dataItem.fromNode && !dataItem.fromNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t\tdataItem.link.show();\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides node.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t\tdataItem.link.hide();\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t\tdataItem.link.hide();\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Marks node as invalid, for redrawal in the next update cycle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif(!this.isDisposed()){\r\n\t\t\tsuper.validate();\r\n\t\t\tthis.invalidateLinks();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\r\n\t\tthis.outgoingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"fromNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.fromNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.incomingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"toNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.toNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * List of incoming items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Incoming items\r\n\t */\r\n\tpublic get incomingDataItems(): List<this[\"_dataItem\"]> {\r\n\t\tif (!this._incomingDataItems) {\r\n\t\t\tlet incomingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\tincomingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._incomingSorted = this._incomingDataItems.iterator();\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._incomingDataItems = incomingDataItems;\r\n\t\t}\r\n\t\treturn this._incomingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * List of outgoing items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Outgoing items\r\n\t */\r\n\tpublic get outgoingDataItems(): List<FlowDiagramDataItem> {\r\n\t\tif (!this._outgoingDataItems) {\r\n\t\t\tlet outgoingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\toutgoingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._outgoingSorted = this._outgoingDataItems.iterator();\r\n\t\t\t\t}\r\n\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._outgoingDataItems = outgoingDataItems;\r\n\t\t}\r\n\t\treturn this._outgoingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * A name of the node.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setPropertyValue(\"name\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.getPropertyValue(\"name\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incoming+outgoing link values\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set total(value: number) {\r\n\t\tthis.setPropertyValue(\"total\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get total(): number {\r\n\t\treturn this.getPropertyValue(\"total\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incomming link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalIncoming(value: number) {\r\n\t\tthis.setPropertyValue(\"totalIncoming\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalIncoming(): number {\r\n\t\treturn this.getPropertyValue(\"totalIncoming\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalOutgoing(value: number) {\r\n\t\tthis.setPropertyValue(\"totalOutgoing\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalOutgoing(): number {\r\n\t\treturn this.getPropertyValue(\"totalOutgoing\");\r\n\t}\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setColorProperty(\"color\", value);\r\n\t\tif (this._background) {\r\n\t\t\tthis._background.fill = value;\r\n\t\t}\r\n\t\tthis.fill = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.getPropertyValue(\"color\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\t\tcolumn.stroke = this.fill;\r\n\r\n\t\tcolumn.copyFrom(<any>this);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Legend data item that corresponds to this series.\r\n\t *\r\n\t * @param value  Data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tthis._legendDataItem.itemContainer.deepInvalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramNode\"] = FlowDiagramNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FlowDiagramNode.ts","/**\r\n * FlowDiagramLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t */\r\n\tcolorMode?: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\";\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n\r\n\t/**\r\n\t * [maskBullets description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * [tooltipLocation description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttooltipLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramLinkAdapters extends IContainerAdapters, IFlowDiagramLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Flow Diagram.\r\n *\r\n * @see {@link IFlowDiagramLinkEvents} for a list of available events\r\n * @see {@link IFlowDiagramLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramLink extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tprotected _gradient: LinearGradient;\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected _bullets: ListTemplate<Bullet>;\r\n\r\n\t/**\r\n\t * Link sprite\r\n\t */\r\n\tpublic link: Sprite;\r\n\r\n\t/**\r\n\t * Bullets mask spite\r\n     */\r\n\tprotected _bulletsMask: Sprite;\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tprotected _bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: Line | Polyline;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramLink\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.maskBullets = false;\r\n\r\n\t\tthis.colorMode = \"fromNode\";\r\n\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\r\n\t\t// this is very important, otherwise the container will be shifted\r\n\t\tthis.verticalCenter = \"none\";\r\n\t\tthis.horizontalCenter = \"none\";\r\n\r\n\t\tthis.tooltipText = \"{fromName}→{toName}:{value.value}\";\r\n\t\tthis.tooltipLocation = 0.5;\r\n\r\n\t\tthis.link = this.createChild(Sprite);\r\n\t\tthis.link.shouldClone = false;\r\n\t\tthis.link.setElement(this.paper.add(\"path\"));\r\n\t\tthis.link.isMeasured = false;\r\n\t\tthis.fillOpacity = 0.2;\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullets() {\r\n\t\t$iter.each(this.bullets.iterator(), (bullet) => {\r\n\t\t\tbullet.parent = this.bulletsContainer;\r\n\r\n\t\t\tbullet.maxWidth = this.maxWidth;\r\n\t\t\tbullet.maxHeight = this.maxHeight;\r\n\r\n\t\t\tthis.positionBullet(bullet);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tpublic get bulletsContainer() {\r\n\t\tif (!this._bulletsContainer) {\r\n\t\t\tlet bulletsContainer = this.createChild(Container);\r\n\t\t\tbulletsContainer.shouldClone = false;\r\n\t\t\tbulletsContainer.layout = \"none\";\r\n\t\t\tthis._bulletsContainer = bulletsContainer;\r\n\t\t}\r\n\t\treturn this._bulletsContainer;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bullets mask sprite\r\n     */\r\n\tpublic get bulletsMask() {\r\n\t\tif (!this._bulletsMask) {\r\n\t\t\tlet bulletsMask = this.createChild(Sprite);\r\n\t\t\tbulletsMask.shouldClone = false;\r\n\t\t\tbulletsMask.setElement(this.paper.add(\"path\"));\r\n\t\t\tbulletsMask.isMeasured = false;\r\n\t\t\tthis._bulletsMask = bulletsMask;\r\n\t\t}\r\n\t\treturn this._bulletsMask;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets at relative bullet.locationX position on the link.\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullet(bullet: Bullet) {\r\n\r\n\t\tlet location = bullet.locationX;\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = bullet.locationY;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\t\tlet point = this.middleLine.positionToPoint(location);\r\n\r\n\t\tbullet.moveTo(point);\r\n\r\n\t\tlet rotationField = bullet.propertyFields.rotation;\r\n\t\tlet angle: number;\r\n\t\tif (bullet.dataItem) {\r\n\t\t\tlet dataContext: any = bullet.dataItem.dataContext;\r\n\t\t\tangle = dataContext[rotationField];\r\n\t\t}\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = point.angle;\r\n\t\t}\r\n\r\n\t\tbullet.rotation = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t * Some of the links, like ChordLink does not support gradiens well.\r\n\t *\r\n\t * @param value  Fill mode\r\n\t */\r\n\tpublic set colorMode(value: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\") {\r\n\t\tif (value == \"gradient\") {\r\n\t\t\tlet color = this.fill;\r\n\r\n\t\t\tthis.gradient.stops.clear();\r\n\t\t\tif (color instanceof Color) {\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t}\r\n\t\t\tthis.fill = this.gradient;\r\n\t\t\tthis.stroke = this.gradient;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"colorMode\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Fill mode\r\n\t */\r\n\tpublic get colorMode(): \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\" {\r\n\t\treturn this.getPropertyValue(\"colorMode\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link bullets be masked or not\r\n\t *\r\n\t * @param value\r\n\t * @default false\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return mask bullets value\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of a tooltip.\r\n\t * @default 0.5\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set tooltipLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Tooltip location value\r\n\t */\r\n\tpublic get tooltipLocation(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Adds color steps in the link gradient.\r\n\t *\r\n\t * @param value  Fill option\r\n\t */\r\n\tprotected setFill(value: Color | Pattern | LinearGradient | RadialGradient) {\r\n\t\tsuper.setFill(value)\r\n\t\tlet gradient = this._gradient;\r\n\r\n\t\tif (gradient && value instanceof Color) {\r\n\t\t\tgradient.stops.clear();\r\n\t\t\tgradient.addColor(value);\r\n\t\t\tgradient.addColor(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates bounding box based on element dimension settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t *\r\n\t * @return [description]\r\n\t */\r\n\tpublic get bullets(): ListTemplate<Bullet> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new ListTemplate<Bullet>(new Bullet());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._bullets));\r\n\t\t\tthis._disposers.push(this._bullets.template);\r\n\t\t\tthis._bullets.events.on(\"inserted\", (event) => {\r\n\t\t\t\tevent.newValue.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\tif (event.property == \"locationX\" || event.property == \"locationY\") {\r\n\t\t\t\t\t\tthis.positionBullet(event.target);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t}, undefined, false)\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties from another [[FlowDiagramLink]].\r\n\t *\r\n\t * @param source  Source link\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.bullets.copyFrom(source.bullets);\r\n\t\tlet middleLine = this.middleLine;\r\n\t\tif (middleLine) {\r\n\t\t\tif (middleLine instanceof Line && source.middleLine instanceof Line) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\r\n\t\t\tif (middleLine instanceof Polyline && source.middleLine instanceof Polyline) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.link.copyFrom(source.link);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip X (px)\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip Y (px)\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tpublic get gradient() {\r\n\t\tif (!this._gradient) {\r\n\t\t\tthis._gradient = new LinearGradient();\r\n\t\t}\r\n\t\treturn this._gradient;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramLink\"] = FlowDiagramLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FlowDiagramLink.ts","/**\r\n * FlowDiagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { FlowDiagramNode } from \"../elements/FlowDiagramNode\";\r\nimport { FlowDiagramLink } from \"../elements/FlowDiagramLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[FlowDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class FlowDiagramDataItem extends ChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: FlowDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: FlowDiagramLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Source node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set fromName(value: string) {\r\n\t\tthis.setProperty(\"fromName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get fromName(): string {\r\n\t\treturn this.properties.fromName;\r\n\t}\r\n\r\n\t/**\r\n\t * Destination node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set toName(value: string) {\r\n\t\tthis.setProperty(\"toName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get toName(): string {\r\n\t\treturn this.properties.toName;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Node color\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", toColor(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @return color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * Link's value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A visual element, representing link between the source and target nodes.\r\n\t *\r\n\t * Link's actual thickness will be determined by `value` of this link and\r\n\t * `value` of the source node.\r\n\t *\r\n\t * @readonly\r\n\t * @return Link element\r\n\t */\r\n\tpublic get link(): this[\"_link\"] {\r\n\t\tif (!this._link) {\r\n\t\t\tlet link = this.component.links.create();\r\n\t\t\tthis._link = link;\r\n\r\n\t\t\tthis.addSprite(link);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.links.removeValue(link);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._link;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramDataFields extends IChartDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n\r\n\t/**\r\n\t * Visibility of a node\r\n\t */\r\n\tvisible?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[FlowDiagram]]\r\n */\r\nexport interface IFlowDiagramProperties extends IChartProperties {\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t */\r\n\tnodePadding?: number;\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort a\r\n\t */\r\n\tsortBy?: \"none\" | \"name\" | \"value\";\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t */\r\n\tminNodeSize: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramEvents extends IChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramAdapters extends IChartAdapters, IFlowDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart\r\n * @see {@link IFlowDiagramEvents} for a list of available Events\r\n * @see {@link IFlowDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagram extends Chart {\r\n\r\n\t/**\r\n\t * A Color Set to use when applying/generating colors for each subsequent\r\n\t * node.\r\n\t */\r\n\tpublic colors: ColorSet = new ColorSet();\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IFlowDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramEvents;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node: FlowDiagramNode;\r\n\r\n\r\n\t/**\r\n\t * A list of chart's FlowDiagram nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tprotected _nodes: DictionaryTemplate<string, this[\"_node\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _link: FlowDiagramLink;\r\n\r\n\t/**\r\n\t * A list of FlowDiagram links connecting nodes.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tprotected _links: ListTemplate<this[\"_link\"]>;\r\n\r\n\t/**\r\n\t * A container that holds all of the link elements.\r\n\t */\r\n\tpublic linksContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds all of the node elements.\r\n\t */\r\n\tpublic nodesContainer: Container;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, FlowDiagramNode]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagram\";\r\n\t\tthis.nodePadding = 20;\r\n\t\tthis.sortBy = \"none\";\r\n\t\tthis.sequencedInterpolation = true;\r\n\r\n\t\tthis.colors.step = 2;\r\n\t\tthis.minNodeSize = 0.02;\r\n\r\n\t\tlet linksContainer = this.chartContainer.createChild(Container);\r\n\t\tlinksContainer.shouldClone = false;\r\n\t\tlinksContainer.layout = \"none\";\r\n\t\tlinksContainer.isMeasured = false;\r\n\t\tthis.linksContainer = linksContainer;\r\n\r\n\t\tlet nodesContainer = this.chartContainer.createChild(Container);\r\n\t\tnodesContainer.shouldClone = false;\r\n\t\tnodesContainer.layout = \"none\";\r\n\t\tnodesContainer.isMeasured = false;\r\n\t\tthis.nodesContainer = nodesContainer;\r\n\r\n\t\t// this data item holds sums, averages, etc\r\n\t\tthis.dataItem = this.createDataItem();\r\n\t\tthis.dataItem.component = this;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\t\tthis.dataItem.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\tthis.nodes.clear();\r\n\t\t}\r\n\r\n\t\tthis.sortNodes();\r\n\r\n\t\tthis.colors.reset();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tlet sum = 0;\r\n\t\tlet count = 0;\r\n\t\tlet low: number;\r\n\t\tlet high: number;\r\n\r\n\t\t// build blocks\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tlet fromName = dataItem.fromName;\r\n\r\n\t\t\tif (fromName) {\r\n\t\t\t\tlet node = this.nodes.getKey(fromName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(fromName);\r\n\t\t\t\t\tnode.name = fromName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.fromNode = node;\r\n\t\t\t\tdataItem.fromNode.outgoingDataItems.push(dataItem);\r\n\t\t\t}\r\n\t\t\tlet toName = dataItem.toName;\r\n\t\t\tif (toName) {\r\n\t\t\t\tlet node = this.nodes.getKey(toName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(toName);\r\n\t\t\t\t\tnode.name = toName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdataItem.toNode = node;\r\n\t\t\t\tdataItem.toNode.incomingDataItems.push(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\tlet strokeModifier = new LinearGradientModifier();\r\n\t\t\t\tstrokeModifier.opacities = [0, 1];\r\n\t\t\t\tdataItem.link.strokeModifier = strokeModifier;\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\tlet fillModifier = new LinearGradientModifier();\r\n\t\t\t\tfillModifier.opacities = [1, 0];\r\n\t\t\t\tdataItem.link.strokeModifier = fillModifier;\r\n\t\t\t}\r\n\r\n\t\t\tlet value = dataItem.value;\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\tsum += value;\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif (low > value || !$type.isNumber(low)) {\r\n\t\t\t\t\tlow = value;\r\n\t\t\t\t}\r\n\t\t\t\tif (high < value || !$type.isNumber(high)) {\r\n\t\t\t\t\thigh = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet key = \"value\";\r\n\r\n\t\tthis.dataItem.setCalculatedValue(key, high, \"high\");\r\n\t\tthis.dataItem.setCalculatedValue(key, low, \"low\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum, \"sum\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum / count, \"average\");\r\n\t\tthis.dataItem.setCalculatedValue(key, count, \"count\");\r\n\r\n\r\n\t\t$iter.each(this.nodes.iterator(), (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\r\n\t\t\tif (node.fill instanceof Color) {\r\n\t\t\t\tnode.color = node.fill;\r\n\t\t\t}\r\n\r\n\t\t\tif (node.color == undefined) {\r\n\t\t\t\tnode.color = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (node.dataItem.color != undefined) {\r\n\t\t\t\tnode.color = node.dataItem.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (!node.dataItem.visible) {\r\n\t\t\t\tnode.hide(0);\r\n\t\t\t}\r\n\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.sortNodes();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sorts nodes by either their values or names, based on `sortBy` setting.\r\n\t */\r\n\tprotected sortNodes() {\r\n\t\tif (this.sortBy == \"name\") {\r\n\t\t\tthis._sorted = this.nodes.sortedIterator();\r\n\t\t}\r\n\t\telse if (this.sortBy == \"value\") {\r\n\t\t\tthis._sorted = $iter.sort(this.nodes.iterator(), (x, y) => $order.reverse($number.order(x[1].total, y[1].total)));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._sorted = this.nodes.iterator();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a cummulative value of the node.\r\n\t *\r\n\t * A node's value is determined by summing values of all of the incoming\r\n\t * links or all of the outgoing links, whichever results in bigger number.\r\n\t *\r\n\t * @param node  Node value\r\n\t */\r\n\tprotected getNodeValue(node: FlowDiagramNode) {\r\n\r\n\t\t// todo: totalIncomming totalOutgoing, total\r\n\r\n\t\tlet incomingTotal = 0;\r\n\t\tlet outgoingTotal = 0;\r\n\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\tincomingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\toutgoingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tnode.total = incomingTotal + outgoingTotal;\r\n\t\tnode.totalIncoming = incomingTotal;\r\n\t\tnode.totalOutgoing = outgoingTotal;\r\n\t};\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Flow diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new FlowDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t *\r\n\t * Padding will add extra space around node's name label.\r\n\t *\r\n\t * @param value Padding (px)\r\n\t */\r\n\tpublic set nodePadding(value: number) {\r\n\t\tthis.setPropertyValue(\"nodePadding\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Padding (px)\r\n\t */\r\n\tpublic get nodePadding(): number {\r\n\t\treturn this.getPropertyValue(\"nodePadding\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sort nodes by \"name\" or \"value\" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.\r\n\t * @default \"none\"\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set sortBy(value: \"none\" | \"name\" | \"value\") {\r\n\t\tthis.setPropertyValue(\"sortBy\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Node sorting\r\n\t */\r\n\tpublic get sortBy(): \"none\" | \"name\" | \"value\" {\r\n\t\treturn this.getPropertyValue(\"sortBy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t * @default 0.02\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set minNodeSize(value: number) {\r\n\t\tthis.setPropertyValue(\"minNodeSize\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns min node size\r\n\t */\r\n\tpublic get minNodeSize(): number {\r\n\t\treturn this.getPropertyValue(\"minNodeSize\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of chart's nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tpublic get nodes(): DictionaryTemplate<string, this[\"_node\"]> {\r\n\t\tif (!this._nodes) {\r\n\t\t\tlet template = this.createNode();\r\n\t\t\ttemplate.events.on(\"hit\", (event) => {\r\n\t\t\t\tevent.target.handleHit(event);\r\n\t\t\t});\r\n\t\t\tthis._nodes = new DictionaryTemplate<string, this[\"_node\"]>(template);\r\n\t\t\tthis._disposers.push(new DictionaryDisposer(this._nodes));\r\n\t\t}\r\n\t\treturn this._nodes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode(): this[\"_node\"] {\r\n\t\tlet node = new FlowDiagramNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of chart's links.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tpublic get links(): ListTemplate<this[\"_link\"]> {\r\n\t\tif (!this._links) {\r\n\t\t\tthis._links = new ListTemplate<this[\"_link\"]>(this.createLink());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._links));\r\n\t\t}\r\n\t\treturn this._links;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink(): this[\"_link\"] {\r\n\t\tlet link = new FlowDiagramLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\tthis.nodes.each((key, node) => {\r\n\t\t\t\tlegendData.push(node);\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.nodes.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagram\"] = FlowDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/FlowDiagram.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ILabelBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ILabelBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILabelBulletAdapters extends IBulletAdapters, ILabelBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class LabelBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILabelBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILabelBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILabelBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t */\r\n\tpublic label: Label;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"LabelBullet\";\r\n\r\n\t\tlet label = this.createChild(Label);\r\n\t\tlabel.shouldClone = false;\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.truncate = true;\r\n\t\tlabel.hideOversized = false;\r\n\r\n\t\tlabel.maxWidth = 500;\r\n\t\tlabel.maxHeight = 500;\r\n\r\n\t\tlabel.stroke = color();\r\n\t\tlabel.strokeOpacity = 0;\r\n\t\tlabel.fill = new InterfaceColorSet().getFor(\"text\");\r\n\r\n\t\tthis.events.on(\"maxsizechanged\", this.handleMaxSize, this, false);\r\n\r\n\t\tthis.label = label;\r\n\r\n\t\t// not good, as lineSeries will have labels somewhere in the middle.\r\n\t\t//this.locationX = 0.5;\r\n\t\t//this.locationY = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tprotected handleMaxSize(){\r\n\t\tthis.label.maxWidth = this.maxWidth;\r\n\t\tthis.label.maxHeight = this.maxHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[LabelBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LabelBullet\"] = LabelBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/LabelBullet.ts","/**\r\n * SankeyNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SankeyDiagram, SankeyDiagramDataItem } from \"../types/SankeyDiagram\";\r\nimport { LabelBullet } from \"./LabelBullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeProperties extends IFlowDiagramNodeProperties {\r\n\r\n\t/**\r\n\t * A level node is at. (0 - ...)\r\n\t */\r\n\tlevel?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyNodeAdapters extends IFlowDiagramNodeAdapters, ISankeyNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Sankey Diagram.\r\n *\r\n * A Sankey node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[SankeyLink]] elements.\r\n *\r\n * @see {@link ISankeyNodeEvents} for a list of available events\r\n * @see {@link ISankeyNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyNodeEvents;\r\n\r\n\r\n\t/**\r\n\t * [nextInCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextInCoord: number = 0;\r\n\r\n\t/**\r\n\t * [nextOutCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextOutCoord: number = 0;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: SankeyDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[SankeyDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * A label element which shows node's value.\r\n\t */\r\n\tpublic valueLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic nameLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyNode\";\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tlet nameLabel = this.createChild(LabelBullet);\r\n\t\tnameLabel.shouldClone = false;\r\n\t\t//@should we auto update these locations if position is changed?\r\n\t\tnameLabel.locationX = 1;\r\n\t\tnameLabel.locationY = 0.5;\r\n\t\tnameLabel.label.text = \"{name}\";\r\n\r\n\t\t//nameLabel.label.textElement.hideOversized = false;\r\n\t\tnameLabel.width = 150;\r\n\t\tnameLabel.height = 150;\r\n\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\tnameLabel.label.padding(0, 5, 0, 5);\r\n\t\tthis.nameLabel = nameLabel;\r\n\r\n\t\tlet valueLabel = this.createChild(LabelBullet);\r\n\t\tvalueLabel.shouldClone = false;\r\n\t\tvalueLabel.label.hideOversized = false;\r\n\t\tvalueLabel.locationX = 0.5;\r\n\t\tvalueLabel.locationY = 0.5;\r\n\t\tvalueLabel.width = 150;\r\n\t\tvalueLabel.height = 150;\r\n\t\t//valueLabel.label.text = \"{value}\";\r\n\t\tvalueLabel.label.horizontalCenter = \"middle\";\r\n\t\tthis.valueLabel = valueLabel;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.background.hiddenState.copyFrom(hiddenState);\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\t\tthis.nextInCoord = 0;\r\n\t\tthis.nextOutCoord = 0;\r\n\t\tlet chart = this.chart;\r\n\r\n\t\tif (chart) {\r\n\t\t\tlet orientation = chart.orientation;\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tx = this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.nextInCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ty = this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tx = this.nextInCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.endX = x;\r\n\t\t\t\t\t\tlink.endY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.fromNode) {\r\n\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = this.pixelX + this.dx - link.maxWidth;\r\n\t\t\t\t\t\t\t\tlink.startY = link.endY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = link.endX;\r\n\t\t\t\t\t\t\t\tlink.startY = this.pixelY + this.dy - link.maxHeight;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// TODO is this needed ?\r\n\t\t\t\t\t\t\t$utils.used(link.gradient);\r\n\r\n\t\t\t\t\t\t\tlink.fill = dataItem.toNode.color;\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextInCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t\tx = this.pixelX + this.pixelWidth + this.dx - 1;\r\n\t\t\t\t\t\t\ty = this.nextOutCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t\tx = this.nextOutCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.pixelY + this.pixelHeight + this.dy - 1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.startX = x;\r\n\t\t\t\t\t\tlink.startY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * this.chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = this.pixelX + link.maxWidth + this.dx;\r\n\t\t\t\t\t\t\t\tlink.endY = link.startY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = link.startX;\r\n\t\t\t\t\t\t\t\tlink.endY = this.pixelY + link.maxHeight + this.dy;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlink.opacity = this.opacity;\r\n\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextOutCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.positionBullet(this.nameLabel);\r\n\t\tthis.positionBullet(this.valueLabel);\r\n\t}\r\n\r\n\t/**\r\n\t * Positions the bullet so it is centered within the node element.\r\n\t *\r\n\t * @param bullet  Target bullet\r\n\t */\r\n\tprotected positionBullet(bullet: LabelBullet) {\r\n\t\tif (bullet) {\r\n\t\t\tbullet.x = this.measuredWidth * bullet.locationX;\r\n\t\t\tbullet.y = this.measuredHeight * bullet.locationY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A level node is displayed at. (0 - ...)\r\n\t *\r\n\t * Levels are measured from left to right.\r\n\t *\r\n\t * The nodes in the left-most column will have `level = 0`.\r\n\t *\r\n\t * Nodes in second column - `level = 1`, etc.\r\n\t *\r\n\t * @param value  Level\r\n\t */\r\n\tpublic set level(value: number) {\r\n\t\tthis.setPropertyValue(\"level\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\treturn this.getPropertyValue(\"level\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[SankeyNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.nameLabel.copyFrom(source.nameLabel);\r\n\t\tthis.valueLabel.copyFrom(source.valueLabel);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyNode\"] = SankeyNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/SankeyNode.ts","/**\r\n * SankeyLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SankeyDiagramDataItem, SankeyDiagram } from \"../types/SankeyDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyLinkAdapters extends IFlowDiagramLinkAdapters, ISankeyLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link ISankeyLinkEvents} for a list of available events\r\n * @see {@link ISankeyLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n\t */\r\n\tpublic middleLine: Polyspline;\r\n\r\n\tpublic chart: SankeyDiagram;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyLink\";\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.tension = 0.8;\r\n\t\tthis.controlPointDistance = 0.2;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.linkWidth = 0;\r\n\r\n\t\tthis.startX = 0;\r\n\t\tthis.endX = 0;\r\n\r\n\t\tthis.startY = 0;\r\n\t\tthis.endY = 0;\r\n\r\n\t\tthis.middleLine = this.createChild(Polyspline);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tprotected makeBackwards() {\r\n\t\tif (this.states.getKey(\"backwards\") != undefined) {\r\n\t\t\tthis.setState(\"backwards\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\r\n\t\t\tlet x0 = this.startX\r\n\t\t\tlet y0 = this.startY;\r\n\t\t\tlet x1 = this.endX;\r\n\t\t\tlet y1 = this.endY;\r\n\r\n\t\t\tif (this.states.getKey(\"backwards\")) {\r\n\t\t\t\tthis.setState(\"default\");\r\n\t\t\t}\r\n\r\n\t\t\tif (this.dataItem) {\r\n\t\t\t\tlet chart = this.dataItem.component;\r\n\r\n\t\t\t\tif (chart) {\r\n\t\t\t\t\tif (chart.orientation == \"horizontal\") {\r\n\t\t\t\t\t\tif (x1 < x0) {\r\n\t\t\t\t\t\t\t[x0, x1] = [x1, x0];\r\n\t\t\t\t\t\t\t[y0, y1] = [y1, y0];\r\n\t\t\t\t\t\t\tthis.makeBackwards();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (y1 < y0) {\r\n\t\t\t\t\t\t\t[y0, y1] = [y1, y0];\r\n\t\t\t\t\t\t\t[x0, x1] = [x1, x0];\r\n\t\t\t\t\t\t\tthis.makeBackwards();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(x1)) {\r\n\t\t\t\tx1 = x0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(y1)) {\r\n\t\t\t\ty1 = y0;\r\n\t\t\t}\r\n\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet w = this.linkWidth;\r\n\r\n\t\t\tlet path = \"\";\r\n\r\n\t\t\tlet xt0 = x0;\r\n\t\t\tlet yt0 = y0;\r\n\r\n\t\t\tlet xt1 = x1;\r\n\t\t\tlet yt1 = y1;\r\n\r\n\t\t\tlet xb0 = x0 + w * $math.sin(startAngle);\r\n\t\t\tlet xb1 = x1 + w * $math.sin(endAngle);\r\n\r\n\t\t\tlet yb0 = y0 + w * $math.cos(startAngle);\r\n\t\t\tlet yb1 = y1 + w * $math.cos(endAngle);\r\n\r\n\t\t\tlet xm0 = x0 + w / 2 * $math.sin(startAngle);\r\n\t\t\tlet xm1 = x1 + w / 2 * $math.sin(endAngle);\r\n\r\n\t\t\tlet ym0 = y0 + w / 2 * $math.cos(startAngle);\r\n\t\t\tlet ym1 = y1 + w / 2 * $math.cos(endAngle);\r\n\r\n\t\t\tthis.zIndex = this.zIndex || this.dataItem.index;\r\n\r\n\t\t\tlet tensionX = this.tension + (1 - this.tension) * $math.sin(startAngle);\r\n\t\t\tlet tensionY = this.tension + (1 - this.tension) * $math.cos(startAngle);\r\n\r\n\t\t\tthis.middleLine.tensionX = tensionX;\r\n\t\t\tthis.middleLine.tensionY = tensionY;\r\n\r\n\t\t\tif ($type.isNumber(w) && ($type.isNumber(x0) && $type.isNumber(x1) && $type.isNumber(y0) && $type.isNumber(y1))) {\r\n\r\n\t\t\t\t// solves issues with gradient fill of straight lines\r\n\t\t\t\tif ($math.round(xt0, 3) == $math.round(xt1, 3)) {\r\n\t\t\t\t\txt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yt0, 3) == $math.round(yt1, 3)) {\r\n\t\t\t\t\tyt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(xb0, 3) == $math.round(xb1, 3)) {\r\n\t\t\t\t\txb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yb0, 3) == $math.round(yb1, 3)) {\r\n\t\t\t\t\tyb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet minX = Math.min(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet minY = Math.min(yb0, yb1, yt0, yt1);\r\n\t\t\t\tlet maxX = Math.max(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet maxY = Math.max(yb0, yb1, yt0, yt1);\r\n\r\n\t\t\t\tthis._bbox = {\r\n\t\t\t\t\tx: minX,\r\n\t\t\t\t\ty: minY,\r\n\t\t\t\t\twidth: maxX - minX,\r\n\t\t\t\t\theight: maxY - minY\r\n\t\t\t\t};\r\n\r\n\t\t\t\tlet cpd = this.controlPointDistance;\r\n\r\n\t\t\t\tlet kxt0 = xt0 + (xt1 - xt0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyt0 = yt0 + (yt1 - yt0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxt1 = xt1 - (xt1 - xt0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyt1 = yt1 - (yt1 - yt0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet kxm0 = xm0 + (xm1 - xm0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kym0 = ym0 + (ym1 - ym0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxm1 = xm1 - (xm1 - xm0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kym1 = ym1 - (ym1 - ym0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet angle = $math.getAngle({ x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 });\r\n\r\n\t\t\t\tlet dx = (w / $math.cos(angle) - w) / $math.tan(angle) * $math.cos(startAngle);\r\n\t\t\t\tlet dy = (w / $math.sin(angle) - w) * $math.tan(angle) * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb0 = -dx / 2 + xb0 + (xb1 - xb0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyb0 = -dy / 2 + yb0 + (yb1 - yb0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb1 = -dx / 2 + xb1 - (xb1 - xb0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyb1 = -dy / 2 + yb1 - (yb1 - yb0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tif (ym1 == ym0) {\r\n\t\t\t\t\tym1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.middleLine.segments = [[{ x: xm0, y: ym0 }, { x: kxm0, y: kym0 }, { x: kxm1, y: kym1 }, { x: xm1, y: ym1 }]];\r\n\r\n\t\t\t\tkxt0 += dx / 2;\r\n\t\t\t\tkyt0 += dy / 2;\r\n\r\n\t\t\t\tkxt1 += dx / 2;\r\n\t\t\t\tkyt1 += dy / 2;\r\n\r\n\t\t\t\tpath += $path.moveTo({ x: xt0, y: yt0 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xt0, y: yt0 }, { x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 }, { x: xt1, y: yt1 }]);\r\n\t\t\t\tpath += $path.lineTo({ x: xb1, y: yb1 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xb1, y: yb1 }, { x: kxb1, y: kyb1 }, { x: kxb0, y: kyb0 }, { x: xb0, y: yb0 }]);\r\n\t\t\t\tpath += $path.closePath();\r\n\t\t\t}\r\n\r\n\t\t\tthis.link.path = path;\r\n\r\n\t\t\tif (this.maskBullets) {\r\n\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t}\r\n\t\t\tthis.positionBullets();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start X\r\n\t */\r\n\tpublic set startX(value: number) {\r\n\t\tthis.setPropertyValue(\"startX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start X\r\n\t */\r\n\tpublic get startX(): number {\r\n\t\treturn this.getPropertyValue(\"startX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End X\r\n\t */\r\n\tpublic set endX(value: number) {\r\n\t\tthis.setPropertyValue(\"endX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End X\r\n\t */\r\n\tpublic get endX(): number {\r\n\t\treturn this.getPropertyValue(\"endX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start Y\r\n\t */\r\n\tpublic set startY(value: number) {\r\n\t\tthis.setPropertyValue(\"startY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start Y\r\n\t */\r\n\tpublic get startY(): number {\r\n\t\treturn this.getPropertyValue(\"startY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set endY(value: number) {\r\n\t\tthis.setPropertyValue(\"endY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get endY(): number {\r\n\t\treturn this.getPropertyValue(\"endY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set linkWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"linkWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get linkWidth(): number {\r\n\t\treturn this.getPropertyValue(\"linkWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance of control point of a link, defines relative distance from a node at which linke should bend\r\n\t * @default 0.2\r\n\t * @param value\r\n\t */\r\n\tpublic set controlPointDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"controlPointDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return relative control point distance\r\n\t */\r\n\tpublic get controlPointDistance(): number {\r\n\t\treturn this.getPropertyValue(\"controlPointDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Tension of a spline, 1 would make the link to have sharp edges\r\n\t * @default 0.8\r\n\t * @param value\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return tension value\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyLink\"] = SankeyLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/SankeyLink.ts","/**\r\n * Sankey diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SankeyNode } from \"../elements/SankeyNode\";\r\nimport { SankeyLink } from \"../elements/SankeyLink\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SankeyDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SankeyDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: SankeyNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: SankeyNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[SankeyDiagram]]\r\n */\r\nexport interface ISankeyDiagramProperties extends IFlowDiagramProperties {\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort at all\r\n\t */\r\n\tnodeAlign?: \"top\" | \"bottom\" | \"middle\";\r\n\r\n\r\n\t/**\r\n\t * Orientation of the chart.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyDiagramAdapters extends IFlowDiagramAdapters, ISankeyDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\r\nexport class SankeyDiagram extends FlowDiagram {\r\n\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISankeyDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyDiagramEvents;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelSum: { [index: number]: number };\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelNodesCount: { [index: number]: number };\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node: SankeyNode;\r\n\r\n\t/**\r\n\t * [maxSum description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic maxSum: number;\r\n\r\n\t/**\r\n\t * level with max sum\r\n\t */\r\n\tprotected _maxSumLevel: number;\r\n\r\n\t/**\r\n\t * [valueHeight description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _valueHeight: number;\r\n\r\n\t/**\r\n\t * A total number of levels, present on this chart.\r\n\t */\r\n\tprotected _levelCount: number;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, this[\"_node\"]]>;\r\n\r\n\tprotected _heightAnimation: Animation;\r\n\r\n\tprotected _level: number;\r\n\r\n\tprotected _counter: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagram\";\r\n\t\tthis.orientation = \"horizontal\";\r\n\t\tthis.nodeAlign = \"middle\";\r\n\r\n\t\tthis.nodesContainer.width = percent(100);\r\n\t\tthis.nodesContainer.height = percent(100);\r\n\r\n\t\tthis.linksContainer.width = percent(100);\r\n\t\tthis.linksContainer.height = percent(100);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis._valueHeight = undefined;\t\t\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis._levelCount = 0;\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tnode.level = undefined;\r\n\t\t});\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tnode.level = this.getNodeLevel(node, 0);\r\n\t\t\tthis._levelCount = $math.max(this._levelCount, node.level);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns node's highest level.\r\n\t *\r\n\t * @param node   Node\r\n\t * @param level  Current level\r\n\t * @return New level\r\n\t */\r\n\tprotected getNodeLevel(node: this[\"_node\"], level: number): number {\r\n\t\tlet levels: number[] = [level];\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (link) => {\r\n\t\t\tif (link.fromNode) {\r\n\t\t\t\tif ($type.isNumber(link.fromNode.level)) {\r\n\t\t\t\t\tlevels.push(link.fromNode.level + 1);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._counter = 0;\r\n\t\t\t\t\tthis.checkLoop(link.fromNode);\r\n\t\t\t\t\tif (this._counter < this.dataItems.length) {\r\n\t\t\t\t\t\tlevels.push(this.getNodeLevel(link.fromNode, level + 1));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn Math.max(...levels);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if there's no loop in the ancestor chain.\r\n\t * \r\n\t * @param  node  Node\r\n\t */\r\n\tprotected checkLoop(node: this[\"_node\"]): void {\r\n\t\tthis._counter++;\r\n\r\n\t\tif (this._counter > this.dataItems.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (link) => {\r\n\t\t\tthis.checkLoop(link.fromNode);\r\n\t\t})\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates relation between pixel height and total value.\r\n\t *\r\n\t * In Sankey the actual thickness of links and height of nodes will depend\r\n\t * on their values.\r\n\t */\r\n\tprotected calculateValueHeight() {\r\n\t\t// calculate sums of each level\r\n\t\tthis._levelSum = {};\r\n\t\tthis._levelNodesCount = {};\r\n\t\tthis.maxSum = 0;\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelSum[level])) {\r\n\t\t\t\tthis._levelSum[level] += value;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelSum[level] = value;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelNodesCount[level])) {\r\n\t\t\t\tthis._levelNodesCount[level]++;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelNodesCount[level] = 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tlet availableHeight: number;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tavailableHeight = this.chartContainer.maxHeight - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tavailableHeight = this.chartContainer.maxWidth - 1;\r\n\t\t}\r\n\r\n\r\n\t\tlet maxSumLevel: number;\r\n\t\tlet minHeight: number;\r\n\r\n\t\t$object.each(this._levelSum, (key, value) => {\r\n\t\t\tlet realValue = value;\r\n\r\n\t\t\tlet levelNodeCount = this._levelNodesCount[key];\r\n\t\t\tlet valueHeight = (availableHeight - (levelNodeCount - 1) * this.nodePadding) / realValue;\r\n\r\n\t\t\tif (valueHeight == Infinity) {\r\n\t\t\t\tvalueHeight = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (minHeight > valueHeight || !$type.isNumber(minHeight)) {\r\n\t\t\t\tminHeight = valueHeight;\r\n\t\t\t\tthis.maxSum = realValue;\r\n\t\t\t\tmaxSumLevel = $type.toNumber(key);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._maxSumLevel = maxSumLevel;\r\n\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\r\n\r\n\t\tif (valueHeight == Infinity) {\r\n\t\t\tvalueHeight = 0;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(this.valueHeight)) {\r\n\t\t\tthis.valueHeight = valueHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet finalHeight;\r\n\t\t\ttry {\r\n\t\t\t\tfinalHeight = this._heightAnimation.animationOptions[0].to;\r\n\t\t\t}\r\n\t\t\tcatch (err) {\r\n\r\n\t\t\t}\r\n\t\t\t// without animations it will be non-smooth as maxValue jumps from one column to another\r\n\t\t\tif (finalHeight != valueHeight) {\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tduration = this.nodes.template.states.getKey(\"active\").transitionDuration;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (err) {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._heightAnimation = new Animation(this, { property: \"valueHeight\", from: this.valueHeight, to: valueHeight }, duration, this.interpolationEasing).start();\r\n\t\t\t\tthis._disposers.push(this._heightAnimation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.calculateValueHeight();\r\n\r\n\t\tlet container = this.nodesContainer;\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\tlet availableHeight: number;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tavailableHeight = this.chartContainer.maxHeight - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tavailableHeight = this.chartContainer.maxWidth - 1;\r\n\t\t}\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\t\t\tlet levelCoordinate: number = 0;\r\n\r\n\t\t\tlet nodeCount = this._levelNodesCount[level];\r\n\r\n\t\t\tswitch (this.nodeAlign) {\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight - (nodeCount - maxSumLevelNodeCount) * this.nodePadding;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"middle\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * this.nodePadding / 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.maxSum == 0) {\r\n\t\t\t\tswitch (this.nodeAlign) {\r\n\t\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\t\tlevelCoordinate = availableHeight - nodeCount * (this.minNodeSize * availableHeight + this.nodePadding);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"middle\":\r\n\t\t\t\t\t\tlevelCoordinate = availableHeight / 2 - nodeCount / 2 * (this.minNodeSize * availableHeight + this.nodePadding);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tnode.parent = container;\r\n\r\n\t\t\tlet delta: number;\r\n\t\t\tlet x: number;\r\n\t\t\tlet y: number;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tdelta = (this.innerWidth - node.pixelWidth) / this._levelCount;\r\n\r\n\t\t\t\tx = delta * node.level;\r\n\t\t\t\ty = nextCoordinate[level] || levelCoordinate;\r\n\r\n\t\t\t\tlet h = value * this.valueHeight;\r\n\r\n\t\t\t\tif (total == 0 && h == 0) {\r\n\t\t\t\t\th = this.minNodeSize * availableHeight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.height = h;\r\n\t\t\t\tnode.minX = x;\r\n\t\t\t\tnode.maxX = x;\r\n\t\t\t\tnextCoordinate[level] = y + h + this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdelta = (this.innerHeight - node.pixelHeight) / this._levelCount;\r\n\r\n\t\t\t\tx = nextCoordinate[level] || levelCoordinate;\r\n\t\t\t\ty = delta * node.level;\r\n\r\n\t\t\t\tlet w = value * this.valueHeight;\r\n\r\n\t\t\t\tif (total == 0 && w == 0) {\r\n\t\t\t\t\tw = this.minNodeSize * availableHeight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.width = w;\r\n\t\t\t\tnode.minY = y;\r\n\t\t\t\tnode.maxY = y;\r\n\t\t\t\tnextCoordinate[level] = x + w + this.nodePadding;\r\n\t\t\t}\r\n\t\t\tnode.x = x;\r\n\t\t\tnode.y = y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Performs actual operations to reveal this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param duration Fade in duration (ms)\r\n\t * @return Fade in duration (ms)\r\n\t */\r\n\tprotected showReal(duration?: number): $type.Optional<Animation> {\r\n\r\n\t\tif (this.preventShow) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.interpolationDuration > 0) {\r\n\t\t\tlet container = this.nodesContainer;\r\n\r\n\t\t\tlet i: number = 0;\r\n\r\n\t\t\t$iter.each(this.links.iterator(), (link) => {\r\n\t\t\t\tlink.hide(0);\r\n\t\t\t})\r\n\r\n\t\t\t$iter.each(this._sorted, (strNode) => {\r\n\r\n\t\t\t\tlet node = strNode[1];\r\n\r\n\t\t\t\tlet property: \"dx\" | \"dy\";\r\n\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\tnode.dx = -(container.pixelWidth - node.pixelWidth) / Math.max(this._levelCount, 1);\r\n\t\t\t\t\tproperty = \"dx\";\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnode.dy = -(container.pixelHeight - node.pixelHeight) / Math.max(this._levelCount, 1);\r\n\t\t\t\t\tproperty = \"dy\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet delay = 0;\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + duration * i / $iter.length(this.nodes.iterator());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.opacity = 0;\r\n\t\t\t\tnode.invalidateLinks();\r\n\r\n\t\t\t\tnode.animate([{ property: \"opacity\", from: 0, to: 1 }, { property: property, to: 0 }], this.interpolationDuration, this.interpolationEasing).delay(delay);\r\n\r\n\t\t\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\ti++;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn super.showReal();\r\n\t}\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet levelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2;\r\n\r\n\t\t\tlet property: \"x\" | \"y\";\r\n\t\t\tlet nodeHeight: number;\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tproperty = \"y\";\r\n\t\t\t\tnodeHeight = node.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tproperty = \"x\";\r\n\t\t\t\tnodeHeight = node.pixelWidth;\r\n\t\t\t}\r\n\r\n\t\t\tnode.animate({ property: property, to: nextCoordinate[level] || levelCoordinate }, this.interpolationDuration, this.interpolationEasing);\r\n\t\t\tnextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + this.nodePadding;\r\n\r\n\t\t\tnode.invalidateLinks();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sankey diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new SankeyDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n\t *\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set nodeAlign(value: \"top\" | \"middle\" | \"bottom\") {\r\n\t\tthis.setPropertyValue(\"nodeAlign\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Returns nodeAlign value\r\n\t */\r\n\tpublic get nodeAlign(): \"top\" | \"middle\" | \"bottom\" {\r\n\t\treturn this.getPropertyValue(\"nodeAlign\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n\t *\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t\tlet nameLabel = this.nodes.template.nameLabel;\r\n\r\n\t\tif (value == \"vertical\") {\r\n\t\t\tthis.nodes.template.width = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"middle\";\r\n\t\t\tnameLabel.locationX = 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.nodes.template.height = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\t\tnameLabel.locationX = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode(): this[\"_node\"] {\r\n\t\tlet node = new SankeyNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink(): this[\"_link\"] {\r\n\t\tlet link = new SankeyLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get valueHeight(): number {\r\n\t\treturn this._valueHeight;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set valueHeight(value: number) {\r\n\t\tif (value != this._valueHeight) {\r\n\t\t\tthis._valueHeight = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tdisposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis._sorted = this.nodes.iterator();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/SankeyDiagram.ts","/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tlet label = this.createChild(AxisLabelCircular);\r\n\t\tlabel.location = 0.5;\r\n\t\tlabel.radius = 5;\r\n\t\tlabel.text = \"{name}\";\r\n\t\tlabel.zIndex = 1;\r\n\t\tlabel.shouldClone = false;\r\n\t\tthis.label = label;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this, false);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.setStateOnChildren = false;\r\n\r\n\t\tthis.slice.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.adapter.add(\"tooltipX\", (tooltipX, target)=>{\r\n\t\t    return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (tooltipY, target)=>{\r\n\t\t    return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = this.total;\r\n\t\t\tlet arc = slice.arc;\r\n\t\t\tlet sliceStartAngle = slice.startAngle;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = sliceStartAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = sliceStartAngle + arc * label.location;\r\n\t\t\tlet startAngle = sliceStartAngle + (1 - sum / this.adjustedTotal) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tif ($type.isNaN(startAngle)) {\r\n\t\t\t\tstartAngle = sliceStartAngle;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.fixPosition(labelAngle, slice.radius);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\t\tlink.startAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\t\tlet slice = this.slice;\r\n\t\tlet mAngle = this.trueStartAngle + slice.arc / 2;\r\n\t\tlet radius = slice.radius;\r\n\r\n\t\tlet tx = radius * $math.cos(mAngle);\r\n\t\tlet ty = radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tslice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordNode.ts","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.path = d;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/elements/QuadraticCurve.ts","/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.path = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\r\n\t\t\t\tthis.positionBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordLink.ts","/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DictionaryTemplate } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"absolute\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.invalidate, this, false);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chartContainer = this.chartContainer;\r\n\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/ChordDiagram.ts","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\treturn treeMapDataItem.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\ttreeMapDataItem.hide(duration);\r\n\t\t}\r\n\t\treturn super.hide(duration, delay, toValue, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\ttreeMapDataItem.show(duration, delay, fields);\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\t/**\r\n\t * Parent data item of a series.\r\n\t */\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\tthis.showOnInit = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param duration  Duration of fade in (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tif(this.preventShow){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t//dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.values.value.value);\r\n\t\t\tdataItem.show(duration);\r\n\t\t})\r\n\r\n\t\treturn super.showReal(interpolationDuration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of fade out (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet animation = super.hideReal(interpolationDuration);\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t//dataItem.treeMapDataItem.setWorkingValue(\"value\", 0);\r\n\t\t\tdataItem.hide(duration);\r\n\t\t})\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\t\t\r\n\t\treturn 0;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\treturn 1;\r\n\t}\t\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\tprotected disableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tsuper.disableUnusedColumns(dataItem);\r\n\t\tif(dataItem.column){\r\n\t\t\tdataItem.column.__disabled = false;\r\n\t\t}\r\n\t}\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport { Export } from \"../../core/export/Export\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Series of children data items.\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {workingValue:0};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tif (value.label) {\r\n\t\t\tvalue.label.dataItem = this;\r\n\t\t}\r\n\t\tif (value.valueLabel) {\r\n\t\t\tvalue.valueLabel.dataItem = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a duration (ms) the Data Item should take to animate from one\r\n\t * value to another.\r\n\t *\r\n\t * If the duration is not specified via parameter, this method will try to\r\n\t * request a default duration from the related `Component`.\r\n\t *\r\n\t * @param duration  Default duration (ms)\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic getDuration(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\r\n\t\tlet value = 0;\r\n\t\tif (!this.children || this.children.length == 0) {\r\n\t\t\tvalue = this.values[\"value\"].workingValue;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\tlet childValue = child.value;\r\n\t\t\t\tif ($type.isNumber(childValue)) {\r\n\t\t\t\t\tvalue += childValue;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t\t/*\r\n\t\tlet value = this.values[\"value\"].workingValue;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;*/\r\n\t}\r\n\r\n\t/**\r\n\t * Percent value of a node\r\n\t */\r\n\tpublic get percent(): number {\r\n\t\tif (this.parent) {\r\n\t\t\treturn this.value / this.parent.value * 100;\r\n\t\t}\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * For the legend to work properly\r\n\t */\r\n\tpublic get fill(): Color {\r\n\t\treturn this.color;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * Series of children data items\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (series != this._series) {\r\n\t\t\tif (this._series) {\r\n\t\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\t\tthis._series.dispose();\r\n\t\t\t}\r\n\t\t\tthis._series = series;\r\n\t\t\tthis._disposers.push(series);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", 0);\r\n\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.hide(duration, delay, toValue, fields);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet seriesDataItem = this.seriesDataItem;\r\n\t\tif (seriesDataItem) {\r\n\t\t\tseriesDataItem.bullets.each((key, value) => {\r\n\t\t\t\tvalue.hide();\r\n\t\t\t\tvalue.preventShow = true;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn super.hide(duration, delay, toValue, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", this.values.value.value);\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.show(duration, delay, fields);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet seriesDataItem = this.seriesDataItem;\r\n\t\tif (seriesDataItem) {\r\n\t\t\tseriesDataItem.bullets.each((key, value) => {\r\n\t\t\t\tvalue.preventShow = false;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n\t/**\r\n\t * If set to `true`, columns of parent nodes will be hidden when user\r\n\t * drills-down into deeper levels.\r\n\t * \r\n\t * @sice 4.7.4\r\n\t * @default false\r\n\t */\r\n\thideParentColumns?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied automatically to each new chart item, if\r\n\t * not explicitly set.\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis._usesData = true;\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\t\tthis.hideParentColumns = false;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis<any>());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis<any>());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\ttemplate.virtualParent = this;\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t}, undefined, false)\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (!dataItem.isDisposed()) {\r\n\t\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}, undefined, true);\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = Math.round((maxX * this.pixelHeight / this.pixelWidth) / 10) * 10 || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\t\tthis.xAxis.getMinMax();\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\t\tthis.yAxis.getMinMax();\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._updateDataItemIndexes(0);\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected setData(value: any[]) {\r\n\t\tthis.currentLevel = 0;\r\n\t\tthis.currentlyZoomed = undefined;\r\n\t\tthis.xAxis.start = 0;\r\n\t\tthis.xAxis.end = 1;\r\n\t\tthis.yAxis.start = 0;\r\n\t\tthis.yAxis.end = 1;\r\n\t\tsuper.setData(value);\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\t\t\t// for the legend to get {value}\r\n\t\t\tseries.dataItem.dataContext = dataItem;\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columnsContainer.hide(0);\r\n\t\t\tseries.bulletsContainer.hide(0);\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this, undefined);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columnsContainer.show();\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\tbullet.show();\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tif (this.hideParentColumns) {\r\n\t\t\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t\telse if (series.level == this.currentLevel) {\r\n\t\t\t\t\tif (this.maxLevels > 1) {\r\n\t\t\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\t\tif (dataItem.treeMapDataItem.children) {\r\n\t\t\t\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\t\t\t\tbullet.hide();\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item. If dataItem is not specified, the chart will zoom-out.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem?: TreeMapDataItem): void {\r\n\t\tif (!dataItem) {\r\n\t\t\tdataItem = this._homeDataItem;\r\n\t\t}\r\n\r\n\t\tlet zoomOutButton = this.zoomOutButton;\r\n\t\t// this is needed because if there is only one fist level, it won't be shown\r\n\t\tif (zoomOutButton) {\r\n\t\t\tif (dataItem != this._homeDataItem) {\r\n\t\t\t\tzoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tzoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem && dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\r\n\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isDisposed() && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\tthis._dataDisposers.push(rangeChangeAnimation);\r\n\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t * @param value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, columns of parent nodes will be hidden when user\r\n\t * drills-down into deeper levels.\r\n\t * \r\n\t * @sice 4.7.4\r\n\t * @default false\r\n\t * @param  value  Hide?\r\n\t */\r\n\tpublic set hideParentColumns(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideParentColumns\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hide?\r\n\t */\r\n\tpublic get hideParentColumns(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideParentColumns\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tif(n > 0){\r\n\t\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\t\t}\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0;\r\n\t\t\t\tnode.y0 = y0;\r\n\t\t\t\tnode.x1 = x1;\r\n\t\t\t\tnode.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) {\r\n\t\t\t\t\tk = mid + 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\thi = mid;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) {\r\n\t\t\t\t--k;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif(value == 0){\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0;\r\n\t\t\t\tnode.y0 = y0;\r\n\t\t\t\tnode.x1 = x1;\r\n\t\t\t\tnode.y1 = y1;\t\t\t\t\r\n\t\t\t\treturn;\r\n\t\t\t}\t\t\t\t\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet node;\r\n\t\tlet i = -1;\r\n\t\tlet n = nodes.length;\r\n\t\tlet k = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tnode.x1 = x1;\r\n\t\t\tnode.y0 = y0;\r\n\t\t\ty0 += node.value * k;\r\n\t\t\tnode.y1 = y0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.y0 = y0;\r\n\t\t\tnode.y1 = y1;\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tx0 += node.value * k;\r\n\t\t\tnode.x1 = x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tif (parent.level & 1) {\r\n\t\t\tthis.slice(parent);\r\n\t\t} else {\r\n\t\t\tthis.dice(parent);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0;\r\n\t\t\tdy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo {\r\n\t\t\t\tsumValue = nodes.getIndex(i1++).value;\r\n\t\t\t} while (!sumValue && i1 < n);\r\n\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? (y0 += (dy * sumValue) / value) : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? (x0 += (dx * sumValue) / value) : x1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue;\r\n\t\t\ti0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleSeriesAdded2() {\r\n\t\t// void\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getLegendLevel(dataItem: TreeMapDataItem): TreeMapDataItem {\r\n\t\tif (!dataItem) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!dataItem.children) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (dataItem.children.length > 1) {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t\telse if (dataItem.children.length == 1) {\r\n\t\t\tlet child = dataItem.children.getIndex(0);\r\n\t\t\tif (child.children) {\r\n\t\t\t\treturn this.getLegendLevel(child);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn dataItem;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleLegendSeriesAdded(series:TreeMapSeries){\r\n\t\t// void\r\n\t}\t\r\n\r\n\t/**\r\n\t * A data item associated with top node.\r\n\t * \r\n\t * @since 4.8.2\r\n\t */\r\n\tpublic get homeDataItem(): TreeMapDataItem {\r\n\t\treturn this._homeDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\r\n\t\t\tlet legendParent = this.getLegendLevel(this._homeDataItem);\r\n\r\n\t\t\tif (legendParent) {\r\n\t\t\t\tlet legendData: Array<this[\"_dataItem\"]> = [];\r\n\r\n\t\t\t\tlegendParent.children.each((dataItem) => {\r\n\t\t\t\t\t//if (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\tlegendData.push(dataItem);\r\n\t\t\t\t\t//}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tlegend.data = legendData;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\r\n\t\tsuper.disposeData();\r\n\r\n\t\tthis._homeDataItem = undefined;\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxis.disposeData();\r\n\t\tthis.yAxis.disposeData();\r\n\t}\r\n\r\n\t/**\r\n\t * Since this chart uses hierarchical data, we need to remove childrent\r\n\t * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n\t *\r\n\t * @return Export\r\n\t */\r\n\tprotected getExporting(): Export {\r\n\t\tconst exporting = super.getExporting();\r\n\t\texporting.adapter.add(\"formatDataFields\", (info) => {\r\n\t\t\tif (info.format == \"csv\" || info.format == \"xlsx\") {\r\n\t\t\t\tif ($type.hasValue(this.dataFields.children)) {\r\n\t\t\t\t\tdelete info.dataFields[this.dataFields.children];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn info;\r\n\t\t})\r\n\t\treturn exporting;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D || 0;\r\n\t\tlet dy = this.chart.dy3D || 0;\r\n\t\tthis.baseGrid.path =  $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w + dx, y: dy });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column3D]].\r\n */\r\nexport interface IColumn3DProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Column3D]].\r\n */\r\nexport interface IColumn3DEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumn3DAdapters extends IColumnAdapters, IColumn3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column3D extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumn3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumn3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumn3DEvents;\r\n\r\n\r\n\t/**\r\n\t * column3D element\r\n\t */\r\n\tpublic column3D: Rectangle3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column3D\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.column3D = this.createChild(Rectangle3D);\r\n\t\tthis.column3D.shouldClone = false;\r\n\t\tthis.column3D.strokeOpacity = 0;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.column3D;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.width = this.pixelWidth;\r\n\t\t\tthis.column3D.height = this.pixelHeight;\r\n\t\t\tif(this.column3D.invalid){\r\n\t\t\t\tthis.column3D.validate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Column3D]].\r\n\t *\r\n\t * @param source Source Column3D\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.copyFrom(source.column3D);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets actual `fill` property on the SVG element, including applicable color\r\n\t * modifiers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Fill\r\n\t */\r\n\tprotected setFill(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>): void {\r\n\t\tsuper.setFill(value);\r\n\t\tthis.column.fill = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column3D.ts","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of data item.\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\r\n\t\tthis.columns.template.column3D.applyOnClones = true;\r\n\t\tthis.columns.template.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get columnsContainer(): Container {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && chart.columnsContainer && chart.leftAxesContainer.layout != \"vertical\" && chart.rightAxesContainer.layout != \"vertical\" && chart.bottomAxesContainer.layout != \"horizontal\" && chart.topAxesContainer.layout != \"horizontal\") {\r\n\t\t\treturn chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tif (dataItem.column) {\r\n\t\t\tdataItem.column.dx = this.dx;\r\n\t\t\tdataItem.column.dy = this.dy;\r\n\r\n\t\t\tdataItem.column.visible = this.visible;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tsuper.validateDataElements();\r\n\t\tif (this.chart) {\r\n\t\t\tthis.chart.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columnsContainer.mask = this.createChild(Sprite);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tsuper.updateSeriesMasks();\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tlet columnsContainer = this.columnsContainer;\r\n\t\t\tlet mask = columnsContainer.mask;\r\n\t\t\tcolumnsContainer.mask = undefined;\r\n\t\t\tcolumnsContainer.mask = mask;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates layout\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\r\n\t\tthis.chartContainer.paddingTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\r\n\t\tsuper.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\t\tlet i = 0;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered && i > 0) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / (count);\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tif (series.columnsContainer == this.columnsContainer) {\r\n\t\t\t\t\tseries.dx = this.depth / (count) * $math.cos(this.angle) * (series.depthIndex);\r\n\t\t\t\t\tseries.dy = -this.depth / (count) * $math.sin(this.angle) * (series.depthIndex);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet inversed = false;\r\n\t\t\t\tif ((series.baseAxis == series.xAxis && series.xAxis.renderer.inversed) || (series.baseAxis == series.yAxis && series.yAxis.renderer.inversed)) {\r\n\t\t\t\t\tinversed = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tlet column = dataItem.column;\r\n\t\t\t\t\tif (column) {\r\n\t\t\t\t\t\tif (inversed) {\r\n\t\t\t\t\t\t\tcolumn.zIndex = 1000 * (1000 - i) + s - series.depthIndex * 100;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\t\t\t\tif (inversed) {\r\n\t\t\t\t\ts--;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ts++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.maskColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\tprotected maskColumns() {\r\n\t\tlet w: number = this.plotContainer.pixelWidth;\r\n\t\tlet h: number = this.plotContainer.pixelHeight;\r\n\r\n\t\tlet dx: number = this.dx3D;\r\n\t\tlet dy: number = this.dy3D;\r\n\r\n\t\tlet path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\r\n\t\tlet columnsContainer = this.columnsContainer;\r\n\t\tif (columnsContainer && columnsContainer.mask) {\r\n\t\t\tcolumnsContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Candlestick]].\r\n\t *\r\n\t * @param source Source Candlestick\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { GroupField, IXYSeriesGroupFields } from \"./XYSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t */\r\n\thighDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis high value for\r\n\t * the item.\r\n\t */\r\n\thighValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis low value for\r\n\t * the item.\r\n\t */\r\n\tlowValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis low value for\r\n\t * the item.\r\n\t */\r\n\tlowValueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis high value for\r\n\t * the item.\r\n\t */\r\n\thighValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines data fields that can be calculated for aggregate values.\r\n * \r\n * @since 4.7.0\r\n */\r\nexport interface ICandlestickSeriesGroupFields extends IXYSeriesGroupFields {\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `lowValueX` data field.\r\n\t *\r\n\t * @default \"low\"\r\n\t */\r\n\tlowValueX?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `lowValueY` data field.\r\n\t *\r\n\t * @default \"low\"\r\n\t */\r\n\tlowValueY?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `highValueX` data field.\r\n\t *\r\n\t * @default \"high\"\r\n\t */\r\n\thighValueX?: GroupField;\r\n\r\n\t/**\r\n\t * Indicates how to calculate aggregate value for `highValueY` data field.\r\n\t *\r\n\t * @default \"high\"\r\n\t */\r\n\thighValueY?: GroupField;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines type of the group fields.\r\n\t * \r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t */\r\n\tpublic _groupFields: ICandlestickSeriesGroupFields;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\t/**\r\n\t * Sets type of the column.\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.groupFields.lowValueX = \"low\";\r\n\t\tthis.groupFields.lowValueY = \"low\";\r\n\r\n\t\tthis.groupFields.highValueX = \"high\";\r\n\t\tthis.groupFields.highValueY = \"high\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tthis.validateCandlestick(dataItem);\r\n\t}\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"dataItem\"]) {\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\t\tif (xAxis && yAxis) {\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tlet yAxisFieldName: string = $utils.capitalize(yAxis.axisFieldName);\r\n\t\t\t\tthis._yLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\t\tthis._yHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t\t}\r\n\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tlet xAxisFieldName: string = $utils.capitalize(xAxis.axisFieldName);\r\n\t\t\t\tthis._xLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\t\tthis._xHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.addValueField(xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\t\tthis.addValueField(xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\t\tthis.addValueField(yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\t\tthis.addValueField(yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t\tcolumn.fill = column.stroke;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts","/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick, ICandlestickProperties, ICandlestickAdapters, ICandlestickEvents } from \"./Candlestick\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[OHLC]].\r\n */\r\nexport interface IOHLCProperties extends ICandlestickProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLC]].\r\n */\r\nexport interface IOHLCEvents extends ICandlestickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLC]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCAdapters extends ICandlestickAdapters, IOHLCProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class OHLC extends Candlestick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IOHLCProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IOHLCAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IOHLCEvents;\r\n\r\n\r\n\t/**\r\n\t * Open line element\r\n\t */\r\n\tpublic openLine: Line;\r\n\r\n\t/**\r\n\t * Close line element\r\n\t */\r\n\tpublic closeLine: Line;\r\n\r\n\t/**\r\n\t * High-low line element\r\n\t */\r\n\tpublic highLowLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLC\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\t//super.createAssets();\r\n\r\n\t\tthis.openLine = this.createChild(Line);\r\n\t\tthis.openLine.shouldClone = false;\r\n\r\n\t\tthis.highLowLine = this.createChild(Line);\r\n\t\tthis.highLowLine.shouldClone = false;\r\n\r\n\t\tthis.closeLine = this.createChild(Line);\r\n\t\tthis.closeLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[OHLC]].\r\n\t *\r\n\t * @param source Source OHLC\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.openLine) {\r\n\t\t\tthis.openLine.copyFrom(source.openLine);\r\n\t\t}\r\n\t\tif (this.highLowLine) {\r\n\t\t\tthis.highLowLine.copyFrom(source.highLowLine);\r\n\t\t}\r\n\t\tif (this.closeLine) {\r\n\t\t\tthis.closeLine.copyFrom(source.closeLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/OHLC.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CandlestickSeries, CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesAdapters, ICandlestickSeriesEvents } from \"./CandlestickSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { OHLC } from \"../elements/OHLC\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[OHLCSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class OHLCSeriesDataItem extends CandlestickSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the OHLC elements.\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: OHLCSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"OHLCSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesDataFields extends ICandlestickSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesProperties extends ICandlestickSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesEvents extends ICandlestickSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLCSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCSeriesAdapters extends ICandlestickSeriesAdapters, IOHLCSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link IOHLCSeriesEvents} for a list of available Events\r\n * @see {@link IOHLCSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class OHLCSeries extends CandlestickSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: OHLCSeriesDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IOHLCSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IOHLCSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IOHLCSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IOHLCSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLCSeries\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"OHLC Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new OHLCSeriesDataItem();\r\n\t}\r\n\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet column: OHLC = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet openLine = column.openLine;\r\n\t\t\tlet highLowLine = column.highLowLine;\r\n\t\t\tlet closeLine = column.closeLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\thighLowLine.x = x;\r\n\r\n\t\t\t\t// TODO can these be removed ?\r\n\t\t\t\tdataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tdataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\topenLine.y1 = yOpen - pixelY;\r\n\t\t\t\topenLine.y2 = yOpen - pixelY;\r\n\t\t\t\topenLine.x1 = 0;\r\n\t\t\t\topenLine.x2 = x;\r\n\r\n\t\t\t\tcloseLine.y1 = yClose - pixelY;\r\n\t\t\t\tcloseLine.y2 = yClose - pixelY;\r\n\t\t\t\tcloseLine.x1 = x;\r\n\t\t\t\tcloseLine.x2 = 2 * x;\r\n\r\n\t\t\t\thighLowLine.y1 = yHigh - pixelY;\r\n\t\t\t\thighLowLine.y2 = yLow - pixelY;\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\thighLowLine.y = y;\r\n\r\n\t\t\t\t// TODO can these be removed ?\r\n\t\t\t\tdataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tdataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\topenLine.x1 = xOpen - pixelX;\r\n\t\t\t\topenLine.x2 = xOpen - pixelX;\r\n\t\t\t\topenLine.y1 = y;\r\n\t\t\t\topenLine.y2 = 2 * y;\r\n\r\n\t\t\t\tcloseLine.x1 = xClose - pixelX;\r\n\t\t\t\tcloseLine.x2 = xClose - pixelX;\r\n\t\t\t\tcloseLine.y1 = 0;\r\n\t\t\t\tcloseLine.y2 = y;\r\n\r\n\t\t\t\thighLowLine.x1 = xHigh - pixelX;\r\n\t\t\t\thighLowLine.x2 = xLow - pixelX;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeOpenLine = rangeColumn.openLine;\r\n\t\t\t\t\trangeOpenLine.x = openLine.x;\r\n\t\t\t\t\trangeOpenLine.y = openLine.y;\r\n\t\t\t\t\trangeOpenLine.x1 = openLine.x1;\r\n\t\t\t\t\trangeOpenLine.x2 = openLine.x2;\r\n\t\t\t\t\trangeOpenLine.y1 = openLine.y1;\r\n\t\t\t\t\trangeOpenLine.y2 = openLine.y2;\r\n\r\n\t\t\t\t\tlet rangeCloseLine = rangeColumn.closeLine;\r\n\t\t\t\t\trangeCloseLine.x = closeLine.x;\r\n\t\t\t\t\trangeCloseLine.y = closeLine.y;\r\n\t\t\t\t\trangeCloseLine.x1 = closeLine.x1;\r\n\t\t\t\t\trangeCloseLine.x2 = closeLine.x2;\r\n\t\t\t\t\trangeCloseLine.y1 = closeLine.y1;\r\n\t\t\t\t\trangeCloseLine.y2 = closeLine.y2;\r\n\r\n\t\t\t\t\tlet rangeHighLowLine = rangeColumn.highLowLine;\r\n\t\t\t\t\trangeHighLowLine.x = highLowLine.x;\r\n\t\t\t\t\trangeHighLowLine.y = highLowLine.y;\r\n\t\t\t\t\trangeHighLowLine.x1 = highLowLine.x1;\r\n\t\t\t\t\trangeHighLowLine.x2 = highLowLine.x2;\r\n\t\t\t\t\trangeHighLowLine.y1 = highLowLine.y1;\r\n\t\t\t\t\trangeHighLowLine.y2 = highLowLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: OHLC = marker.createChild(OHLC);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet openLine: Line = column.openLine;\r\n\t\tlet closeLine: Line = column.closeLine;\r\n\t\tlet highLowLine: Line = column.highLowLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLowLine.y = h / 2;\r\n\t\t\thighLowLine.x2 = w;\r\n\r\n\t\t\topenLine.x = w / 3 * 2;\r\n\t\t\topenLine.y2 = h / 2;\r\n\r\n\t\t\tcloseLine.x = w / 3;\r\n\t\t\tcloseLine.y2 = h;\r\n\t\t\tcloseLine.y1 = h / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\r\n\t\t\thighLowLine.x = w / 2;\r\n\t\t\thighLowLine.y2 = h;\r\n\r\n\t\t\topenLine.y = h / 3 * 2;\r\n\t\t\topenLine.x2 = w / 2;\r\n\r\n\t\t\tcloseLine.y = h / 3;\r\n\t\t\tcloseLine.x2 = w;\r\n\t\t\tcloseLine.x1 = w / 2;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.stroke;\r\n\t\tlegendDataItem.colorOrig = column.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new OHLC();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLCSeries\"] = OHLCSeries;\r\nregistry.registeredClasses[\"OHLCSeriesDataItem\"] = OHLCSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/OHLCSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ILineSeriesSegmentAdapters, ILineSeriesSegmentEvents, ILineSeriesSegmentProperties, LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentProperties extends ILineSeriesSegmentProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentEvents extends ILineSeriesSegmentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesSegmentAdapters extends ILineSeriesSegmentAdapters, IStepLineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class StepLineSeriesSegment extends LineSeriesSegment {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesSegment\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number, noRisers?: boolean, vertical?: boolean): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\r\n\t\t\tif (noRisers) {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tfor (let i = 1; i < points.length; i++) {\r\n\t\t\t\t\t\tlet point = points[i];\r\n\t\t\t\t\t\tif (i / 2 == Math.round(i / 2)) {\r\n\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath = $path.moveTo(points[0]) + $path.polyline(points);\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]) + $path.polyline(points);\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\tthis.fillSprite.path = \"\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties {\r\n\tnoRisers?: boolean;\r\n\r\n\tstartLocation?: number;\r\n\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines type for segement.\r\n\t */\r\n\tpublic _segment: StepLineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points     [description]\r\n\t * @param dataItem   [description]\r\n\t * @param xField     [description]\r\n\t * @param yField     [description]\r\n\t * @param backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocationX:number;\r\n\t\tlet endLocationX:number;\r\n\r\n\t\tlet startLocationY:number;\r\n\t\tlet endLocationY:number;\t\t\r\n\r\n\t\tif(this.baseAxis == this.xAxis){\r\n\t\t\tstartLocationX = this.startLocation;\r\n\t\t\tendLocationX = this.endLocation;\r\n\r\n\t\t\tstartLocationY = this.getAdjustedXLocation(dataItem, this.yOpenField);\r\n\t\t\tendLocationY = this.getAdjustedXLocation(dataItem, this.yField);\r\n\t\t}\r\n\r\n\t\tif(this.baseAxis == this.yAxis){\r\n\t\t\tstartLocationY = this.startLocation;\r\n\t\t\tendLocationY = this.endLocation;\r\n\r\n\t\t\tstartLocationX = this.getAdjustedXLocation(dataItem, this.xOpenField);\r\n\t\t\tendLocationX = this.getAdjustedXLocation(dataItem, this.xField);\t\t\t\r\n\t\t}\r\n\r\n\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, startLocationX);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, startLocationY);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, endLocationX);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, endLocationY);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (!this.noRisers) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param segment     Segment\r\n\t * @param points      Segment points\r\n\t * @param closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: StepLineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet vertical = false;\r\n\t\tif (this.yAxis == this.baseAxis) {\r\n\t\t\tvertical = true;\r\n\t\t}\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new StepLineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if step line series should draw only horizontal (or only\r\n\t * vertical, depending on base axis) lines, instead of connecting them with\r\n\t * vertical (or horizontal) lines.\r\n\t *\r\n\t * @default false\r\n\t * @param value  No risers\r\n\t */\r\n\tpublic set noRisers(value: boolean) {\r\n\t\tthis.setPropertyValue(\"noRisers\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return No risers\r\n\t */\r\n\tpublic get noRisers(): boolean {\r\n\t\treturn this.getPropertyValue(\"noRisers\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * start location of the step\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * @default 0\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step end location.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * #default 1\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[RadarColumn]].\r\n\t *\r\n\t * @param source Source RadarColumn\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return X\r\n\t * @ignore\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\treturn this.radarColumn.getTooltipX();\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return Y\r\n\t * @ignore\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\treturn this.radarColumn.getTooltipY();\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of data item.\r\n\t */\r\n\tpublic _dataItem: RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected disableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem) {\r\n\t\t\tif (dataItem.column) {\r\n\t\t\t\tdataItem.column.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.copyProperties(this, radarColumn, visualProperties); // need this \r\n\t\t\t$object.copyProperties(this.columns.template, radarColumn, visualProperties); // second time, no force, so that columns.template would override series properties\t\t\t\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tradarColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet width = radarColumn.width;\r\n\t\tlet percentWidth = 100;\r\n\r\n\t\tif (width instanceof Percent) {\r\n\t\t\tpercentWidth = width.percent;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, 0, \"valueY\"), y: this.yAxis.getY(dataItem, yField, 0, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, 1, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, 1, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, 0, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, 1, \"valueX\");\r\n\r\n\t\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\r\n\t\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tif ($type.isNumber(width)) {\t\t\t\t\r\n\t\t\t\tlet abs = Math.abs(tRadius - bRadius);\r\n\t\t\t\tif (abs > width) {\r\n\t\t\t\t\tlet d = (abs - width) / 2;\r\n\t\t\t\t\ttRadius += d;\r\n\t\t\t\t\tbRadius -= d;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\r\n\t\tif (arc > 0) {\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\trangeColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\t\t\t\t\t\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = rangeColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.paper = this.paper;\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\t\t// hack to be able to determine angle later\r\n\t\tif (radius == 0) {\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\tprotected positionBulletReal(bullet: Sprite, positionX: number, positionY: number) {\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\r\n\t\tbullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\r\n\t}\r\n\r\n\tprotected setXAxis(axis: Axis) {\r\n\t\tsuper.setXAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected setYAxis(axis: Axis) {\r\n\t\tsuper.setYAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected updateRendererRefs() {\r\n\t\tlet rendererX = <AxisRendererCircular>this.xAxis.renderer;\r\n\t\tlet rendererY = <AxisRendererRadial>this.yAxis.renderer;\r\n\r\n\t\trendererX.axisRendererY = rendererY;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts","/**\r\n * Module that defines everything related to building Funnel slices.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Width of the top edge of the slice.\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Width of the bottom edge of the slice.\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\texpandDistance?: number;\r\n\r\n\t/**\r\n\t * Orientation of the slice.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelSlice]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelSliceAdapters extends IContainerAdapters, IFunnelSliceProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to create [[FunnelSlice]] elements.\r\n *\r\n * @see {@link IFunnelSliceEvents} for a list of available events\r\n * @see {@link IFunnelSliceAdapters} for a list of available adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class FunnelSlice extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelSliceProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelSliceAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelSliceEvents;\r\n\r\n\t/**\r\n\t * Main slice element.\r\n\t */\r\n\tpublic slice: Sprite;\r\n\r\n\t/**\r\n\t * Am anchor point the slice tick line is pointing to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @readonly\r\n\t */\r\n\tpublic tickPoint: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.slice = this.createChild(Sprite);\r\n\t\tthis.slice.shouldClone = false;\r\n\t\tthis.slice.setElement(this.paper.add(\"path\"));\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tthis.orientation = \"vertical\";\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tthis.expandDistance = 0;\r\n\r\n\t\tthis.className = \"FunnelSlice\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tlet ed = this.expandDistance;\r\n\r\n\t\tlet path = \"\";\r\n\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet cpr = { x: tr.x + (br.x - tr.x) / 2 + ed * h, y: tr.y + 0.5 * h };\r\n\t\t\tlet cpl = { x: tl.x + (bl.x - tl.x) / 2 - ed * h, y: tl.y + 0.5 * h };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(br);\r\n\t\t\tlet qp2 = $path.lineTo(tl);\r\n\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(br, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tl, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tl) + $path.lineTo(tr) + qp1 + $path.lineTo(bl) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { x: tr.x + (br.x - tr.x) / 2, y: tr.y + (br.y - tr.y) / 2 };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet cpr = { y: tt.y + (bt.y - tt.y) / 2 - ed * w, x: tt.x + 0.5 * w };\r\n\t\t\tlet cpl = { y: tb.y + (bb.y - tb.y) / 2 + ed * w, x: tb.x + 0.5 * w };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(bt);\r\n\t\t\tlet qp2 = $path.lineTo(tb);\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(bt, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tb, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tb) + $path.lineTo(tt) + qp1 + $path.lineTo(bb) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { y: tb.y + (bb.y - tb.y) / 2, x: tb.x + (bb.x - tb.x) / 2 };\r\n\t\t}\r\n\r\n\t\tthis.slice.path = path;\r\n\t\tthis.invalidateLayout();\r\n\t}\r\n\r\n\r\n\tgetPoint(locationX:number, locationY:number):IPoint{\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet mlx = tl.x + (bl.x - tl.x) * locationY;\r\n\t\t\tlet mrx = tr.x + (br.x - tr.x) * locationY;\r\n\r\n\t\t\treturn { x: mlx + (mrx - mlx) * locationX, y: tr.y + (br.y - tr.y) * locationY };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet mty = tt.y + (bt.y - tt.y) * locationX;\r\n\t\t\tlet mby = tb.y + (bb.y - tb.y) * locationX;\r\n\r\n\t\t\treturn { y: mty + (mby - mty) * locationY, x: tt.x + (bt.x - tt.x) * locationX };\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Bottom width\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"bottomWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return bottom width\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Top width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Top width\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"topWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Top width\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the funnel slice: \"horizontal\" or \"vertical\".\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set orintation if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to. It's relative to the\r\n\t * height of the slice.\r\n\t *\r\n\t * Zero (default) will mean the sides will be perfectly straight.\r\n\t *\r\n\t * Positive value will make them bend outwards, resulting in \"puffed\" slices.\r\n\t *\r\n\t * Negative values will make them bend inwards.\r\n\t *\r\n\t * @default 0\r\n\t * @param {number}\r\n\t */\r\n\tpublic set expandDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"expandDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return expandDistance\r\n\t */\r\n\tpublic get expandDistance(): number {\r\n\t\treturn this.getPropertyValue(\"expandDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param source Source Sprite\r\n\t */\r\n\tpublic copyFrom(source :this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.slice) {\r\n\t\t\tthis.slice.copyFrom(source.slice);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSlice\"] = FunnelSlice;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FunnelSlice.ts","/**\r\n * Funnel tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelSlice } from \"./FunnelSlice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { FunnelSeries } from \"../series/FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FunnelTick]].\r\n */\r\nexport interface IFunnelTickProperties extends ITickProperties {\r\n\tlocationX?: number;\r\n\r\n\tlocationY?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelTick]].\r\n */\r\nexport interface IFunnelTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelTickAdapters extends ITickAdapters, IFunnelTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a funnel slice connecting it to a related label.\r\n *\r\n * @see {@link IFunnelTickEvents} for a list of available events\r\n * @see {@link IFunnelTickAdapters} for a list of available Adapters\r\n */\r\nexport class FunnelTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<Label>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<FunnelSlice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FunnelTick\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\r\n\t\tthis.setPropertyValue(\"locationX\", 0);\r\n\t\tthis.setPropertyValue(\"locationY\", 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: FunnelSlice = this.slice;\r\n\t\tlet point = slice.getPoint(this.locationX, this.locationY);\r\n\r\n\t\tif (point) {\r\n\t\t\tlet label = this.label;\r\n\r\n\t\t\tlet series = <FunnelSeries>slice.dataItem.component;\r\n\t\t\tlet p0:IPoint;\r\n\t\t\tlet p1:IPoint;\r\n\t\t\tlet p2:IPoint;\r\n\r\n\t\t\tif (series.orientation == \"vertical\") {\r\n\r\n\t\t\t\tlet x1 = label.pixelX;\r\n\t\t\t\tlet y1 = label.pixelY;\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\tx1 += label.maxRight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp0 = $utils.spritePointToSprite(point, slice, this.parent);\t\t\t\t\r\n\t\t\t\tp2 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n\t\t\t\tp1 = { x: label.parent.pixelX - this.length, y: p2.y };\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\tp1.x = label.parent.measuredWidth + this.length; \r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet x1 = label.pixelX;\r\n\t\t\t\tlet y1 = label.pixelY;\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\ty1 += label.maxBottom;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp0 = $utils.spritePointToSprite(point, slice, this.parent);\r\n\t\t\t\tp2 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n\t\t\t\tp1 = { x: p2.x, y: label.parent.pixelY - this.length };\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\tp1.y = label.parent.measuredHeight + this.length; \r\n\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\tthis.path = $path.moveTo(p0) + $path.lineTo(p1) + $path.lineTo(p2);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [[FunnelSlice]] element tick is attached to.\r\n\t *\r\n\t * @param slice  Slice\r\n\t */\r\n\tpublic set slice(slice: FunnelSlice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this, false),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this, false)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return FunnelSlice\r\n\t */\r\n\tpublic get slice(): FunnelSlice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element tick is attached to.\r\n\t *\r\n\t * @param label  Label\r\n\t */\r\n\tpublic set label(label: Label) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label\r\n\t */\r\n\tpublic get label(): Label {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A relative horizontal position within target element a tick is pointing\r\n\t * to.\r\n\t *\r\n\t * A scale is from 0 to 1, where 0 means left edge, and 1 right edge.\r\n\t *\r\n\t * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n\t * of the slice), or outside 0-1 range, which will put tick anchor position\r\n\t * outside target element.\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationX(value: number) {\r\n\t\tthis.setPropertyValue(\"locationX\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationX(): number {\r\n\t\treturn this.getPropertyValue(\"locationX\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative vertical position within target element a tick is pointing\r\n\t * to.\r\n\t *\r\n\t * A scale is from 0 to 1, where 0 means top edge, and 1 bottom edge.\r\n\t *\r\n\t * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n\t * of the slice), or outside 0-1 range, which will put tick anchor position\r\n\t * outside target element.\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationY(value: number) {\r\n\t\tthis.setPropertyValue(\"locationY\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationY(): number {\r\n\t\treturn this.getPropertyValue(\"locationY\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelTick\"] = FunnelTick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FunnelTick.ts","/**\r\n * Defines Funnel Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SlicedChart } from \"../types/SlicedChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { Align } from \"../../core/defs/Align\";\r\nimport { VerticalAlign } from \"../../core/defs/VerticalAlign\";\r\nimport { options } from \"../../core/Options\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[FunnelSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class FunnelSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: FunnelSlice;\r\n\r\n\t/**\r\n\t * A reference to a label element.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to a tick element.\r\n\t */\r\n\tpublic _tick: FunnelTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: FunnelSeries;\r\n\r\n\t/**\r\n\t * Defines a type of elements linking slices.\r\n\t */\r\n\tpublic _sliceLink: FunnelSlice;\r\n\r\n\t/**\r\n\t * A [[FunnelSlice]] element, related to this data item ([[FunnelSlice]]).\r\n\t *\r\n\t * @readonly\r\n\t * @return Slice element\r\n\t */\r\n\tpublic get sliceLink(): this[\"_sliceLink\"] {\r\n\t\tif (!this._sliceLink) {\r\n\t\t\tlet sliceLink = this.component.sliceLinks.create();\r\n\t\t\tthis._sliceLink = sliceLink;\r\n\t\t\tthis._disposers.push(sliceLink);\r\n\t\t\tsliceLink.parent = this.component.slicesContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.sliceLinks.removeValue(sliceLink);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis.addSprite(sliceLink);\r\n\t\t\tsliceLink.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._sliceLink;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FunnelSeriesDataItem\";\r\n\t\t// this helps to invalidate series when value is 0 an it is hidden (no other events are triggered then)\r\n\t\tthis.events.on(\"visibilitychanged\", () => {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.invalidateDataItems();\r\n\t\t\t}\r\n\t\t}, this, false);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesDataFields extends IPercentSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative width of the slice bottom. See description of `bottomRatio`\r\n\t * property for full description.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tbottomRatio?: number;\r\n\r\n\t/**\r\n\t * Orientation of series\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n\t/**\r\n\t * Put labels on the oppsite side of the series?\r\n\t *\r\n\t * @since 4.1.13\r\n\t */\r\n\tlabelsOpposite?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelSeriesAdapters extends IPercentSeriesAdapters, IFunnelSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IFunnelSeriesEvents} for a list of available Events\r\n * @see {@link IFunnelSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class FunnelSeries extends PercentSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _slice: FunnelSlice;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _tick: FunnelTick;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to chart this series is for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _chart: SlicedChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IFunnelSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: FunnelSeriesDataItem;\r\n\r\n\r\n\tprotected _nextY: number = 0;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t */\r\n\tprotected _sliceLinks: ListTemplate<this[\"_slice\"]>;\r\n\r\n\t/**\r\n\t * Holds sum of values for all slices\r\n\t */\r\n\tprotected _total: number;\r\n\r\n\t/**\r\n\t * Holds number of slices.\r\n\t */\r\n\tprotected _count: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"FunnelSeries\";\r\n\t\tthis.orientation = \"vertical\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.slicesContainer.width = percent(100);\r\n\t\tthis.slicesContainer.height = percent(100);\r\n\r\n\t\tthis._disposers.push(this.slicesContainer.events.on(\"maxsizechanged\", this.invalidateDataItems, this, false));\r\n\r\n\t\tthis.labelsOpposite = true;\r\n\r\n\t\tthis.labelsContainer.layout = \"absolute\";\r\n\r\n\t\tthis.bottomRatio = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a [[FunnelSlice]] element.\r\n\t *\r\n\t * @return Slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new FunnelSlice();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a [[FunnelTick]] element.\r\n\t *\r\n\t * @return Tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new FunnelTick();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Funnel Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new FunnelSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#p')} ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.expandDistance = 0.2;\r\n\t}\r\n\r\n\t/**\r\n\t * [initLabel description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param label [description]\r\n\t */\r\n\tprotected initLabel(label: this[\"_label\"]) {\r\n\t\tsuper.initLabel(label);\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.isMeasured = true;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextY = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\r\n\t\tlet slicesContainer = this.slicesContainer;\r\n\t\tlet labelsContainer = this.labelsContainer;\r\n\t\tlet labelTemplate = this.labels.template;\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tlabelTemplate.interactionsEnabled = true;\r\n\t\t\tslicesContainer.isMeasured = true;\r\n\t\t\tlabelsContainer.isMeasured = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlabelTemplate.interactionsEnabled = false;\r\n\t\t\tslicesContainer.isMeasured = false;\r\n\t\t\tlabelsContainer.isMeasured = false;\r\n\t\t}\r\n\r\n\t\tlet total = 0;\r\n\t\tlet count = 0;\r\n\t\tthis.dataItems.each((dItem) => {\r\n\t\t\tif ($type.hasValue(dItem.value)) {\r\n\t\t\t\tcount++;\r\n\t\t\t\tif (dItem.value > 0) {\r\n\t\t\t\t\ttotal += Math.abs(dItem.getWorkingValue(\"value\") / dItem.value);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (this.ignoreZeroValues) {\r\n\t\t\t\t\t\tcount--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (!dItem.visible || dItem.__disabled || dItem.isHiding) {\r\n\t\t\t\t\t\t\tcount--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ttotal += 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis._total = 1 / count * total;\r\n\t\tthis._count = count;\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tthis.arrangeLabels();\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\r\n\t\t\tif (!nextItem.visible || nextItem.isHiding || nextItem.__disabled || (nextItem.value == 0 && this.ignoreZeroValues)) {\r\n\t\t\t\treturn this.getNextValue(nextItem);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [formDataElement description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected formDataElement(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//if ($type.hasValue(dataItem.value)) {\r\n\t\t// FunnelSlice\r\n\t\tlet slice = dataItem.slice;\r\n\t\tslice.orientation = this.orientation;\r\n\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tsliceLink.orientation = this.orientation;\r\n\r\n\t\tlet tick = dataItem.tick;\r\n\t\tlet label = dataItem.label;\r\n\r\n\t\ttick.slice = slice;\r\n\t\ttick.label = label;\r\n\r\n\t\tif ($type.hasValue(dataItem.value)) {\r\n\t\t\tthis.decorateSlice(dataItem);\r\n\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\tif (dataItem.value == 0 && this.ignoreZeroValues) {\r\n\t\t\t\t\tsprite.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsprite.__disabled = false;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$array.each(dataItem.sprites, (sprite) => {\r\n\t\t\t\tsprite.__disabled = true;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (dataItem.index == this.dataItems.length - 1) {\r\n\t\t\tsliceLink.disabled = true;\r\n\t\t}\r\n\r\n\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tsliceLink.fill = slice.fill;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet nextValue = this.getNextValue(dataItem);\r\n\t\tlet workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\r\n\t\tlet bottomRatio = this.bottomRatio;\r\n\r\n\t\tlet d = 1;\r\n\t\tif (dataItem.value != 0) {\r\n\t\t\td = workingValue / Math.abs(dataItem.value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (dataItem.__disabled || dataItem.isHiding || !dataItem.visible) {\r\n\t\t\t\td = 0.000001;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.ignoreZeroValues && dataItem.value == 0) {\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.__disabled = false;\r\n\t\t}\r\n\r\n\t\tif (this._nextY == Infinity) {\r\n\t\t\tthis._nextY = 0;\r\n\t\t}\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\r\n\t\t\tlet linkHeight = sliceLink.pixelHeight * d;\r\n\r\n\t\t\tmaxHeight = maxHeight + linkHeight; // to avoid one link gap in the bottom\r\n\r\n\t\t\tslice.topWidth = workingValue / this.dataItem.values.value.high * maxWidth;\r\n\t\t\tslice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\tslice.height = Math.min(100000, $math.max(0, maxHeight / this._count * d / this._total - linkHeight));\r\n\r\n\t\t\tslice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = slice.x;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = undefined;\r\n\t\t\t}\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = slice.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet linkWidth = sliceLink.pixelWidth * d;\r\n\r\n\t\t\tmaxWidth = maxWidth + linkWidth; // to avoid one link gap in the bottom\r\n\r\n\t\t\tslice.topWidth = workingValue / this.dataItem.values.value.high * maxHeight;\r\n\t\t\tslice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxHeight;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxHeight;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\t\t\tslice.width = Math.min(100000, maxWidth / this._count * d * 1 / this._total - linkWidth);\r\n\t\t\tslice.y = maxHeight / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = slice.y;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\r\n\t\t\tsliceLink.y = slice.y;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getLastLabel(index: number): Label {\r\n\t\tif (index > 0) {\r\n\t\t\tlet lastLabel = this.labels.getIndex(index);\r\n\t\t\tif (lastLabel.__disabled || !lastLabel.visible) {\r\n\t\t\t\treturn this.getLastLabel(index - 1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn lastLabel;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [arrangeLabels description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected arrangeLabels(): void {\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tlet count = this.labels.length;\r\n\t\t\tif (count > 1) {\r\n\r\n\t\t\t\tlet lastLabel = this.getLastLabel(count - 1);\r\n\t\t\t\tif (lastLabel) {\r\n\r\n\t\t\t\t\tlet lastY = lastLabel.pixelY;\r\n\t\t\t\t\tlet lastX = lastLabel.pixelX;\r\n\r\n\t\t\t\t\tif (count > 1) {\r\n\t\t\t\t\t\tfor (let i = count - 2; i >= 0; i--) {\r\n\t\t\t\t\t\t\tlet label = this.labels.getIndex(i);\r\n\r\n\t\t\t\t\t\t\tif (label.visible && !label.__disabled) {\r\n\t\t\t\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelY + label.measuredHeight > lastY) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.y = Math.min(1000000, lastY - label.measuredHeight);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// horizontal\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelX + label.measuredWidth > lastX) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.x = Math.min(1000000, lastX - label.measuredWidth);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tlastY = label.pixelY;\r\n\t\t\t\t\t\t\t\tlastX = label.pixelX;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlastY = 0;\r\n\t\t\t\t\t\tlastX = 0;\r\n\t\t\t\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\t\t\t\tlet label = this.labels.getIndex(i);\r\n\t\t\t\t\t\t\tif (label.visible && !label.__disabled) {\r\n\t\t\t\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelY < lastY) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.y = Math.min(1000000, lastY);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// horizontal\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (label.pixelX < lastX) {\r\n\t\t\t\t\t\t\t\t\t\tlabel.x = Math.min(1000000, lastX);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlastY += label.measuredHeight;\r\n\t\t\t\t\t\t\t\tlastX += label.measuredWidth;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: FunnelSlice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tbullet.x = slice.pixelX + slice.measuredWidth * locationX;\r\n\t\tbullet.y = slice.pixelY + slice.measuredHeight * locationY;\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the funnel slices: \"horizontal\" or \"vertical\" (default).\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tif (this.setPropertyValue(\"orientation\", value)) {\r\n\t\t\tthis.labelsOpposite = this.labelsOpposite;\r\n\t\t\tthis.invalidate();\r\n\t\t\tif (value == \"vertical\") {\r\n\t\t\t\tthis.ticks.template.locationX = 1;\r\n\t\t\t\tthis.ticks.template.locationY = 0.5;\r\n\t\t\t\tthis.labels.template.rotation = 0;\r\n\t\t\t\tthis.layout = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.ticks.template.locationX = 0.5;\r\n\t\t\t\tthis.ticks.template.locationY = 1;\r\n\t\t\t\tthis.labels.template.rotation = -90;\r\n\t\t\t\tthis.layout = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's bottom will change in relation to slices top AND\r\n\t * next slices top.\r\n\t *\r\n\t * Basically it's a relative value (0-1) that indicates bottom width\r\n\t * position between current slice's top width and the top withd of the next\r\n\t * one.\r\n\t *\r\n\t * The scale goes from 0 (closer to current slice width) to 1 (closer to next\r\n\t * slice with).\r\n\t *\r\n\t * `0` (default) will mean that bottom will be the same as top, resulting in\r\n\t * a prefectly square slice.\r\n\t *\r\n\t * From the data-viz standpoint `0` is a correct setting, since area of the\r\n\t * slices will depict their value correctly.\r\n\t *\r\n\t * `1` will mean that slice will become trapezoid with its bottom matching\r\n\t * width of the next slice.\r\n\t *\r\n\t * `0.5` will make bottom width be in the middle of width of current slice\r\n\t * and the next slice.\r\n\t *\r\n\t * @default 0\r\n\t * @param {number}\r\n\t */\r\n\tpublic set bottomRatio(value: number) {\r\n\t\tif (this.setPropertyValue(\"bottomRatio\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number}\r\n\t */\r\n\tpublic get bottomRatio(): number {\r\n\t\treturn this.getPropertyValue(\"bottomRatio\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of elements linking each actual slice.\r\n\t *\r\n\t * Please note that links are [[FunnelSlice]] objects, just like real links,\r\n\t * so they have all the same configuration options.\r\n\t *\r\n\t * You can use `template` of this link, to specify how links will look.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.sliceLinks.template.fillOpacity = 0.5;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.sliceLinks.template.fillOpacity = 0.5;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"FunnelSeries\",\r\n\t *      // ...\r\n\t *      \"sliceLinks\": {\r\n\t *        \"fillOpacity\": 0.5\r\n\t *      }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Funnel links\r\n\t */\r\n\tpublic get sliceLinks(): ListTemplate<this[\"_slice\"]> {\r\n\t\tif (!this._sliceLinks) {\r\n\t\t\tlet sliceLink = new FunnelSlice();\r\n\t\t\tsliceLink.applyOnClones = true;\r\n\t\t\tsliceLink.fillOpacity = 0.5;\r\n\t\t\tsliceLink.expandDistance = - 0.3;\r\n\t\t\tsliceLink.hiddenState.properties.opacity = 0;\r\n\r\n\t\t\tthis._disposers.push(sliceLink);\r\n\r\n\t\t\tthis._sliceLinks = new ListTemplate(sliceLink);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._sliceLinks));\r\n\t\t}\r\n\t\treturn this._sliceLinks;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tif(!options.animationsEnabled){\r\n\t\t\tinterpolationDuration = 0;\r\n\t\t}\t\t\r\n\r\n\t\tlet delay: number = 0;\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tdataItem.show(interpolationDuration, delay, [\"value\"]);\r\n\t\t});\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet fields: string[] = [\"value\"];\r\n\t\tlet value: number = 0;\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tif(!options.animationsEnabled){\r\n\t\t\tinterpolationDuration = 0;\r\n\t\t}\t\t\t\t\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t});\r\n\r\n\t\tlet animation: Animation = super.hide(duration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setAlignLabels(value: boolean) {\r\n\t\tsuper.setAlignLabels(value);\r\n\t\tthis.ticks.template.disabled = !value;\r\n\t\tlet labelsContainer = this.labelsContainer;\r\n\t\tif (labelsContainer) {\r\n\t\t\t// do not align\r\n\t\t\tif (!value) {\r\n\t\t\t\tlabelsContainer.width = percent(100);\r\n\t\t\t\tlabelsContainer.height = percent(100);\r\n\t\t\t}\r\n\t\t\t//align\r\n\t\t\telse {\r\n\t\t\t\tlabelsContainer.height = undefined;\r\n\t\t\t\tlabelsContainer.width = undefined;\r\n\t\t\t\tlabelsContainer.margin(10, 10, 10, 10);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.labelsOpposite = this.labelsOpposite;\r\n\t}\r\n\r\n\t/**\r\n\t * Put labels on the oppsite side of the series?\r\n\t *\r\n\t * This setting is only used if `alignLabels = true`.\r\n\t *\r\n\t * If set to `true` (default) labels will be drawn to the right (on vertical\r\n\t * series), or to the bottom (on horizontal series).\r\n\t *\r\n\t * If set to `false`, labels will be positioned to the left or top\r\n\t * respectively.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.1.13\r\n\t * @param  value  Labels on opposite side?\r\n\t */\r\n\tpublic set labelsOpposite(value: boolean) {\r\n\t\tthis.setPropertyValue(\"labelsOpposite\", value)\r\n\t\tlet labelTemplate = this.labels.template;\r\n\r\n\t\tlet labelAlign: Align = \"none\";\r\n\t\tlet labelValign: VerticalAlign = \"none\";\r\n\r\n\t\tif (!this.alignLabels) {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlabelAlign = \"center\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelValign = \"middle\";\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// opposite (left/bottom)\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.labelsContainer.toFront();\r\n\t\t\t\t// left\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tthis.ticks.template.locationX = 1;\r\n\t\t\t\t\tlabelTemplate.horizontalCenter = \"left\";\r\n\t\t\t\t\tlabelAlign = \"right\";\r\n\t\t\t\t}\r\n\t\t\t\t// bottom\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.ticks.template.locationY = 1;\r\n\t\t\t\t\tlabelTemplate.horizontalCenter = \"right\";\r\n\t\t\t\t\tlabelValign = \"bottom\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// non oposite (right/top)\r\n\t\t\telse {\r\n\t\t\t\tthis.labelsContainer.toBack();\r\n\t\t\t\t// right\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tthis.ticks.template.locationX = 0;\r\n\t\t\t\t\tlabelAlign = \"left\";\r\n\t\t\t\t}\r\n\t\t\t\t// top\r\n\t\t\t\telse {\r\n\t\t\t\t\tlabelValign = \"top\";\r\n\t\t\t\t\tthis.ticks.template.locationY = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlabelTemplate.align = labelAlign;\r\n\t\tlabelTemplate.valign = labelValign;\r\n\r\n\t\tthis.validateLayout();\r\n\t\tthis.ticks.each((tick) => {\r\n\t\t\ttick.invalidate();\r\n\t\t})\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Labels on opposite side?\r\n\t */\r\n\tpublic get labelsOpposite(): boolean {\r\n\t\treturn this.getPropertyValue(\"labelsOpposite\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSeries\"] = FunnelSeries;\r\nregistry.registeredClasses[\"FunnelSeriesDataItem\"] = FunnelSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/FunnelSeries.ts","/**\r\n * Defines Pyramid Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties, FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PyramidSeriesDataItem extends FunnelSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PyramidSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PyramidSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesDataFields extends IFunnelSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesProperties extends IFunnelSeriesProperties {\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Top width in pixels or percent\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t */\r\n\tpyramidHeight?: number | Percent;\r\n\r\n\t/**\r\n\t * Indicates whether slice value should sould influence its height or area\r\n\t * size.\r\n\t *\r\n\t * @default \"area\"\r\n\t */\r\n\tvalueIs?: \"height\" | \"area\";\r\n}\r\n\r\n/**\r\n * Defines events for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesEvents extends IFunnelSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PyramidSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPyramidSeriesAdapters extends IFunnelSeriesAdapters, IPyramidSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPyramidSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPyramidSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPyramidSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPyramidSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PyramidSeriesDataItem;\r\n\r\n\t/**\r\n\t * [_nextWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextWidth: number;\r\n\r\n\tprotected _pyramidHeight: number;\r\n\r\n\tprotected _pyramidWidth: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PyramidSeries\";\r\n\t\tthis.topWidth = percent(0);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.pyramidHeight = percent(100);\r\n\t\tthis.valueIs = \"area\";\r\n\r\n\t\tthis.sliceLinks.template.width = 0;\r\n\t\tthis.sliceLinks.template.height = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PyramidSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\t\t}\r\n\t\tif (nextValue == 0) {\r\n\t\t\tnextValue = 0.000001;\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.value > 0) {\r\n\t\t\t\tlet relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n\t\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tmaxHeight -= (sliceLink.pixelHeight * relValue);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tmaxWidth -= (sliceLink.pixelWidth * relValue);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n\t\tthis._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - this._pyramidHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - this._pyramidWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet sum = this.dataItem.values.value.absoluteSum;\r\n\r\n\t\tif (sum == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tthis.getNextValue(dataItem);\r\n\r\n\t\tlet workingValue = Math.abs(dataItem.getWorkingValue(\"value\"));\r\n\r\n\t\tlet pyramidWidth = this._pyramidWidth;\r\n\t\tlet pyramidHeight = this._pyramidHeight;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet linkWidth = sliceLink.pixelWidth;\r\n\t\tlet linkHeight = sliceLink.pixelHeight;\r\n\r\n\t\tif ((dataItem.value == 0 || dataItem.value == null) && this.ignoreZeroValues) {\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.__disabled = false;\r\n\t\t}\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceHeight: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\r\n\t\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n\r\n\t\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n\t\t\t\tif (sliceHeight > 0) {\r\n\t\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsliceBottomWidth = sliceTopWidth;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.height = sliceHeight;\r\n\t\t\tslice.width = maxWidth;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\t//slice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = maxWidth / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = maxWidth / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceWidth: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\t\t\t\tsliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceWidth = pyramidWidth * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.width = sliceWidth;\r\n\t\t\tslice.height = maxHeight;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = maxHeight / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth * workingValue / Math.max(Math.abs(dataItem.value), 0.00000001);\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\t\t\tsliceLink.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tthis._nextWidth = slice.bottomWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` (default) means the pyramid will be perfectly pointy.\r\n\t * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n\t * `100%` will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @default 0%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t *\r\n\t * @default 100%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set pyramidHeight(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get pyramidHeight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"pyramidHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` means the pyramid's botto will be pointy.\r\n\t * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n\t * `100%` (default) will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's value will influence its size.\r\n\t *\r\n\t * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n\t * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n\t * slices based on their value.\r\n\t *\r\n\t * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n\t * will represent their value relatively to values of the other slices.\r\n\t *\r\n\t * This is a correct way to depict \"weight\" of each slice based on their\r\n\t * values.\r\n\t *\r\n\t * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n\t * divvied up between slices. Actual slice width or area is not counted in.\r\n\t *\r\n\t * From the data-viz standpoint this does not make a lot of sense, since\r\n\t * slices with lesser values might appear more prominent if they are placed\r\n\t * towards thick end of the pyramid since their areas will be bigger.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @param {\"area\" | \"height\"}\r\n\t */\r\n\tpublic set valueIs(value: \"area\" | \"height\") {\r\n\t\tif (this.setPropertyValue(\"valueIs\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"area\" | \"height\"}\r\n\t */\r\n\tpublic get valueIs(): \"area\" | \"height\" {\r\n\t\treturn this.getPropertyValue(\"valueIs\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PyramidSeries.ts","/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PictorialStackedSeriesDataItem extends PyramidSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PictorialStackedSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PictorialStackedSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesDataFields extends IPyramidSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesProperties extends IPyramidSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendLocation?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesEvents extends IPyramidSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPictorialStackedSeriesAdapters extends IPyramidSeriesAdapters, IPictorialStackedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PictorialStackedSeries extends PyramidSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPictorialStackedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPictorialStackedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPictorialStackedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPictorialStackedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PictorialStackedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PictorialStackedSeries\";\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.valueIs = \"height\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t\tthis.align = \"center\";\r\n\t\tthis.valign = \"middle\";\r\n\r\n\t\tthis._maskSprite = this.slicesContainer.createChild(Sprite);\r\n\t\tthis._maskSprite.visible = false;\r\n\t\tthis._maskSprite.zIndex = 100;\r\n\t\tthis._maskSprite.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Sizes the mask to fit the series.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\r\n\t\tlet maxWidth = this.slicesContainer.maxWidth;\r\n\t\tlet maxHeight = this.slicesContainer.maxHeight;\r\n\r\n\t\tlet maskSprite = this._maskSprite;\r\n\t\t//maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\r\n\r\n\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\r\n\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\tif (scale == Infinity) {\r\n\t\t\tscale = 1; // can't return here, won't draw legend properly\r\n\t\t}\r\n\r\n\t\tscale = $math.max(0.001, scale);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n\t\tlet newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n\r\n\t\tmaskSprite.scale = scale;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tthis.topWidth = newWidth + 4;\r\n\t\t\tthis.bottomWidth = newWidth + 4;\r\n\t\t\tthis.pyramidHeight = newHeight * (endLocation - startLocation);\r\n\t\t\tmaskSprite.x = maxWidth / 2;\r\n\t\t\tmaskSprite.y = newHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.topWidth = newHeight + 4;\r\n\t\t\tthis.bottomWidth = newHeight + 4;\r\n\t\t\tthis.pyramidHeight = newWidth * (endLocation - startLocation);\r\n\t\t\tmaskSprite.valign = \"middle\";\r\n\t\t\tmaskSprite.x = newWidth / 2;\r\n\t\t\tmaskSprite.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tlet y: number;\r\n\t\tlet x: number;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tif (this.valign == \"bottom\") {\r\n\t\t\t\ty = (maxHeight - newHeight);\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"middle\") {\r\n\t\t\t\ty = (maxHeight - newHeight) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"top\") {\r\n\t\t\t\ty = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.align == \"left\") {\r\n\t\t\t\tx = -(maxWidth - newWidth) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"center\") {\r\n\t\t\t\tx = 0;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"right\") {\r\n\t\t\t\tx = (maxWidth - newWidth) / 2;\r\n\t\t\t}\r\n\r\n\t\t\tthis.slices.template.dy = startLocation * newHeight;\r\n\t\t\tif (this.alignLabels) {\r\n\t\t\t\tthis.slicesContainer.dx = x;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.valign == \"bottom\") {\r\n\t\t\t\ty = (maxHeight - newHeight) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"middle\") {\r\n\t\t\t\ty = 0;\r\n\t\t\t}\r\n\t\t\tif (this.valign == \"top\") {\r\n\t\t\t\ty = -(maxHeight - newHeight) / 2;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.align == \"left\") {\r\n\t\t\t\tx = 0;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"center\") {\r\n\t\t\t\tx = (maxWidth - newWidth) / 2;\r\n\t\t\t}\r\n\t\t\tif (this.align == \"right\") {\r\n\t\t\t\tx = (maxWidth - newWidth);\r\n\t\t\t}\r\n\r\n\t\t\tthis.slices.template.dx = startLocation * newWidth;\r\n\t\t\tif (this.alignLabels) {\r\n\t\t\t\tthis.slicesContainer.dy = y;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.slicesContainer.x = x;\r\n\t\tthis.labelsContainer.x = x;\r\n\t\tthis.ticksContainer.x = x;\r\n\r\n\t\tthis.slicesContainer.y = y;\r\n\t\tthis.labelsContainer.y = y;\r\n\t\tthis.ticksContainer.y = y;\r\n\r\n\t\tif (newWidth > 0 && newHeight > 0) {\r\n\t\t\tthis.slicesContainer.mask = maskSprite;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PictorialStackedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] element that is used as a series mask.\r\n\t *\r\n\t * If set, this element's shape will be used to apply shape to the whole\r\n\t * stacked pictorial series.\r\n\t *\r\n\t * You can use this element's `path` property to set an SVG path for the\r\n\t * shape:\r\n\t *\r\n\t * ```TypeScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JSON\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"PictorialStackedSeries\",\r\n\t *     // ...\r\n\t *     \"maskSprite\": {\r\n\t *       \"path\": iconPath\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Mask sprite\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tsuper.initSlice(slice);\r\n\r\n\t\tlet hs = slice.states.getKey(\"hover\");\r\n\t\tif (hs) {\r\n\t\t\ths.properties.expandDistance = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will start relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to start at 30% from the top/left of the\r\n\t * series, we can set `startLocation = 0.3`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.1.13\r\n\t * @param  value  Start location\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"startLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Start location\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will end relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to end at 70% from the top/left of the\r\n\t * series, we can set `endLocation = 0.7`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 1\r\n\t * @since 4.1.13\r\n\t * @param  value  End location\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"endLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End location\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Cone column element\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[ConeColumn]].\r\n\t *\r\n\t * @param source Source ConeColumn\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\t\t\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.innerWidth / 2 + 1\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.innerHeight / 2 + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts","/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnProperties extends IColumnProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Tension\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Orientation of the column\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnAdapters extends IColumnAdapters, ICurvedColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnEvents;\r\n\r\n\t/**\r\n\t * The element that holds curved column shape.\r\n\t */\r\n\tpublic curvedColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * [createAssets description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected createAssets(): void {\r\n\t\tthis.curvedColumn = this.createChild(Sprite);\r\n\t\tthis.curvedColumn.shouldClone = false;\r\n\r\n\t\tthis.setPropertyValue(\"tension\", 0.7);\r\n\r\n\t\tthis.width = percent(120);\r\n\t\tthis.height = percent(120);\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curvedColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w = this.realWidth;\r\n\t\tlet h = this.realHeight;\r\n\t\tlet x = this.realX - this.pixelX;\r\n\t\tlet y = this.realY - this.pixelY;\r\n\r\n\t\tlet points: IPoint[];\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\t$utils.used(this.width);\r\n\r\n\t\tlet tensionX = 1;\r\n\t\tlet tensionY = 1;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\ttensionX = this.tension;\r\n\t\t\tpoints = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttensionY = this.tension;\r\n\t\t\th = Math.abs(h);\r\n\t\t\tpoints = [{ x: x, y: h }, { x: x + w, y: h / 2 }, { x: x, y: 0 }];\r\n\t\t}\r\n\r\n\t\tlet path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n\t\tthis.column.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[CurvedColumn]].\r\n\t *\r\n\t * @param source  Source CurvedColumn\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curvedColumn) {\r\n\t\t\tthis.curvedColumn.copyFrom(source.curvedColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension of the curve.\r\n\t *\r\n\t * Tension defines how \"lose\" the line will be.\r\n\t *\r\n\t * 1 is the maximum tension which would result in pointy columns with\r\n\t * straight edges.\r\n\t *\r\n\t * The smaller the tension th wider the column will be.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param value tension (0-1)\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension (0-1)\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the column.\r\n\t *\r\n\t * Available options: \"vertical\" (default) and \"horizontal\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CurvedColumn.ts","/**\r\n * CurvedColumnSeries module.\r\n *\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { CurvedColumn } from \"../elements/CurvedColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurvedColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CurvedColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnSeriesAdapters extends IColumnSeriesAdapters, ICurvedColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a curved columns graph.\r\n *\r\n * @see {@link ICurvedColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurvedColumnSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines type of the column.\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines type of the data item.\r\n\t */\r\n\tpublic _dataItem: CurvedColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ICurvedColumnSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CurvedColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for the curved column.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new CurvedColumn();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\r\n\t\tlet column = dataItem.column;\r\n\t\tcolumn = dataItem.column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet curvedColumn = dataItem.column.curvedColumn;\r\n\r\n\t\t\tcurvedColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tcolumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumnSeries\"] = CurvedColumnSeries;\r\nregistry.registeredClasses[\"CurvedColumnSeriesDataItem\"] = CurvedColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tlet circle = this.createChild(Circle);\r\n\t\tcircle.shouldClone = false;\r\n\t\tcircle.radius = 5;\r\n\t\tcircle.isMeasured = false;\r\n\t\tthis.circle = circle;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface IErrorBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface IErrorBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IErrorBulletAdapters extends IBulletAdapters, IErrorBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ErrorBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IErrorBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IErrorBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IErrorBulletEvents;\r\n\r\n\tpublic errorLine:Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ErrorBullet\";\r\n\t\tthis.errorLine = this.createChild(Sprite);\r\n\t\tthis.errorLine.shouldClone = false;\r\n\t\tthis.width = 20;\r\n\t\tthis.height = 20;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.isDynamic = true;\r\n\t}\r\n\r\n\r\n\tvalidatePosition(){\r\n\t\tsuper.validatePosition();\r\n\t\tlet w = this.pixelWidth / 2;\r\n\t\tlet h = this.pixelHeight / 2;\r\n\r\n\t\tthis.errorLine.path = $path.moveTo({x:-w, y:-h}) + $path.lineTo({x:w, y:-h}) + $path.moveTo({x:0, y:-h}) + $path.lineTo({x:0, y:h}) + $path.moveTo({x:-w, y:h}) + $path.lineTo({x:w, y:h});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[ErrorBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.errorLine.copyFrom(source.errorLine);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ErrorBullet\"] = ErrorBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ErrorBullet.ts","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Identifies the type of the [[DataItem]] used in this element.\r\n\t */\r\n\tpublic _dataItem!: NavigationBarDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(textLink);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t\ttextLink.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.mask = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point  Point to check\r\n\t * @return Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint, force?:boolean) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point, force);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.path = path;\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts","import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = null\n// module chunks = "],"sourceRoot":""}