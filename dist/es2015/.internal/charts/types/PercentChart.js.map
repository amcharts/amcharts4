{"version":3,"file":"PercentChart.js","sourceRoot":"","sources":["../../../../../src/.internal/charts/types/PercentChart.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Percent chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { PercentSeries, PercentSeriesDataItem } from \"../series/PercentSeries\";\r\nimport { Legend } from \"../Legend\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PercentChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PercentChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PercentChart]].\r\n */\r\nexport interface IPercentChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PercentChart]]\r\n */\r\nexport interface IPercentChartProperties extends ISerialChartProperties { }\r\n\r\n/**\r\n * Defines events for [[PercentChart]].\r\n */\r\nexport interface IPercentChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PercentChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPercentChartAdapters extends ISerialChartAdapters, IPercentChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\r\nexport class PercentChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IPercentChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPercentChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPercentChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPercentChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PercentSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChart\";\r\n\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\t// so that the chart is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (!series.hiddenInLegend) {\r\n\t\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\t\tif (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\t\t\tlegendData.push(<PercentSeriesDataItem>dataItem);\r\n\t\t\t\t\t\t\tif (!dataItem.legendSettings) {\r\n\t\t\t\t\t\t\t\tdataItem.legendSettings = series.legendSettings;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PercentSeries]].\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PercentSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0p')}\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet percentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (percentSeriesDataItem.visible && !percentSeriesDataItem.isHiding) {\r\n\t\t\t\t\tlet slice = percentSeriesDataItem.slice;\r\n\r\n\t\t\t\t\tslice.dispatchImmediately(\"over\");\r\n\t\t\t\t\tslice.isHover = true;\r\n\t\t\t\t\tslice.interactions.isRealHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet percentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tlet slice = percentSeriesDataItem.slice;\r\n\t\t\t\tslice.dispatchImmediately(\"out\");\r\n\t\t\t\tslice.isHover = false;\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\r\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\r\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;\r\n"]}