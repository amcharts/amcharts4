{"version":3,"file":"Base.js","sourceRoot":"","sources":["../../../../src/.internal/core/Base.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Base functionality\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IClone } from \"./utils/Clone\";\r\nimport { List, ListTemplate } from \"./utils/List\";\r\nimport { Dictionary, DictionaryTemplate } from \"./utils/Dictionary\";\r\nimport { Disposer, IDisposer } from \"./utils/Disposer\";\r\nimport { EventDispatcher, AMEvent } from \"./utils/EventDispatcher\";\r\nimport { Adapter } from \"./utils/Adapter\";\r\nimport { Color, color } from \"./utils/Color\";\r\nimport { Percent, percent } from \"./utils/Percent\";\r\nimport { ITheme } from \"../themes/ITheme\";\r\nimport { Ordering } from \"./utils/Order\";\r\n\r\nimport { registry } from \"./Registry\";\r\nimport { cache } from \"./utils/Cache\";\r\n\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n\r\n//import * as $debug from \"./utils/Debug\";\r\n\r\n/**\r\n * Provides base functionality for all derivative objects, like generating ids,\r\n * handling cache, etc.\r\n */\r\nexport class BaseObject implements IClone<BaseObject>, IDisposer {\r\n\r\n\t/**\r\n\t * A unique ID for this object.\r\n\t *\r\n\t * Generated on first access by `uid()` getter.\r\n\t *\r\n\t * @type {Optional<string>}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _uid: $type.Optional<string>;\r\n\r\n\t/**\r\n\t * Indicates if this object has already been deleted. Any\r\n\t * destruction/disposal code should take this into account when deciding\r\n\t * wheter to run potentially costly disposal operations if they already have\r\n\t * been run.\r\n\t *\r\n\t * @type {boolean}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _disposed: boolean = false;\r\n\r\n\t/**\r\n\t * List of IDisposer which will be disposed when the BaseObject is disposed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _disposers: Array<IDisposer> = [];\r\n\r\n\t/**\r\n\t * User-defined id of the object.\r\n\t *\r\n\t * @type {Optional<string>}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _id: $type.Optional<string>;\r\n\r\n\t/**\r\n\t * Holds a universal mapping collection, so that elements and their children\r\n\t * can create and look up all kinds of relations between id and object.\r\n\t *\r\n\t * @type {Optional<Dictionary<string, any>>}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _map: $type.Optional<Dictionary<string, any>>;\r\n\r\n\t/**\r\n\t * The theme used by this object.\r\n\t *\r\n\t * @type {Optional<ITheme[]>}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _themes: $type.Optional<ITheme[]>;\r\n\r\n\t// @review\r\n\t/**\r\n\t * A list of objects that are clones of this object. An object needs to\r\n\t * maintain a list of its clones so that properties can be re-applied to\r\n\t * clones whenever property on the object they were cloned from changes.\r\n\t *\r\n\t * @type {Optional<Dictionary<string, this>>}\r\n\t */\r\n\tprotected _clones: $type.Optional<List<this>>;\r\n\r\n\r\n\t// @review\r\n\t/**\r\n\t * Reference to the original object this object was cloned from. We need to\r\n\t * keep this so we can disassociate it from source object when this object\r\n\t * is disposed.\r\n\t *\r\n\t * @type {Optional<this>}\r\n\t */\r\n\tpublic clonedFrom: $type.Optional<this>;\r\n\r\n\t/**\r\n\t * A class name for the object.\r\n\t *\r\n\t * This property is used by deriving classes to identify which class it is.\r\n\t * We could derive the class name from the object itself, however method of\r\n\t * doing so is too costly, so we are relying on this property to quickly\r\n\t * access type of class.\r\n\t *\r\n\t * @type {Optional<string>}\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _className: $type.Optional<string>;\r\n\r\n\t/**\r\n\t * [cloneId description]\r\n\t *\r\n\t * @type {Optional<string>}\r\n\t * @todo Needs description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic cloneId: $type.Optional<string>;\r\n\r\n\t//protected _classes: { [index: string]: any } = {};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t * * Sets class name\r\n\t */\r\n\tconstructor() {\r\n\t\tthis.className = \"BaseObject\";\r\n\t\t//this.debug();\r\n\t}\r\n\r\n\tprotected debug(): void {\r\n\t\t//$debug.debug(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns object's internal unique ID.\r\n\t *\r\n\t * @return {string} Unique ID\r\n\t */\r\n\tpublic get uid(): string {\r\n\t\tif (!this._uid) {\r\n\t\t\tthis._uid = registry.getUniqueId();\r\n\t\t\tregistry.map.setKey(this._uid, this);\r\n\t\t}\r\n\t\treturn this._uid;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the user-defined id of the element.\r\n\t *\r\n\t * @param {Optional<string>} value Id\r\n\t */\r\n\tpublic set id(value: $type.Optional<string>) {\r\n\t\t//registry.map.setKey(value, this); // registry.map only stores by uid\r\n\t\tthis._id = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return {Optional<string>} Id\r\n\t */\r\n\tpublic get id(): $type.Optional<string> {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a universal collection for mapping ids with objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {Dictionary<string, any>} Map collection\r\n\t */\r\n\tpublic get map(): Dictionary<string, any> {\r\n\t\tif (!this._map) {\r\n\t\t\tthis._map = new Dictionary<string, any>();\r\n\t\t}\r\n\t\treturn this._map;\r\n\t}\r\n\r\n\t/**\r\n\t * Applies properties from all assigned themes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic applyTheme(): void {\r\n\t\t// TODO is this needed ?\r\n\t\tif (registry) {\r\n\t\t\tlet themes = this.getCurrentThemes();\r\n\r\n\t\t\t// TODO is this needed ?\r\n\t\t\tif (themes) {\r\n\t\t\t\t$array.each(themes, (theme, index) => {\r\n\t\t\t\t\ttheme(this);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of themes to be used for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {Optional<ITheme[]>} value An array of themes\r\n\t */\r\n\tpublic set themes(value: $type.Optional<ITheme[]>) {\r\n\t\tthis._themes = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {Optional<ITheme[]>} An array of themes\r\n\t */\r\n\tpublic get themes(): $type.Optional<ITheme[]> {\r\n\t\treturn this._themes;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list of themes that should be applied to this element. It could\r\n\t * either be a list of themes set explicitly on this element, or system-wide.\r\n\t *\r\n\t * @return {ITheme[]} List of themes\r\n\t */\r\n\tpublic getCurrentThemes(): ITheme[] {\r\n\t\treturn this.themes || registry.themes;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns if this object has been already been disposed.\r\n\t *\r\n\t * @return {boolean} Is disposed?\r\n\t */\r\n\tpublic isDisposed(): boolean {\r\n\t\treturn this._disposed;\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this._disposed) {\r\n\t\t\tthis._disposed = true;\r\n\r\n\t\t\tconst a = this._disposers;\r\n\r\n\t\t\tthis._disposers = <any>null;\r\n\r\n\t\t\twhile (a.length !== 0) {\r\n\t\t\t\tconst disposer = a.shift();\r\n\t\t\t\tdisposer.dispose();\r\n\t\t\t}\r\n\r\n\t\t\t// Clear cache\r\n\t\t\tthis.clearCache();\r\n\r\n\t\t\t// remove from clones list\r\n\t\t\tif (this.clonedFrom) {\r\n\t\t\t\tthis.clonedFrom.clones.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tconst uid = this._uid;\r\n\r\n\t\t\tif (uid != null) {\r\n\t\t\t\tregistry.map.removeKey(uid);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an IDisposer, which will be disposed when this object is disposed.\r\n\t *\r\n\t * @param {IDisposer} target Object to dispose\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic addDisposer(target: IDisposer): void {\r\n\t\tthis._disposers.push(target);\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes disposable object and removes it from `_disposers`.\r\n\t *\r\n\t * @param {IDisposer} target Object to dispose\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic removeDispose(target: IDisposer): void {\r\n\t\t//if(target){\r\n\t\tif (!this._disposed) {\r\n\t\t\tlet index = $array.indexOf(this._disposers, target);\r\n\t\t\tif (index > -1) {\r\n\t\t\t\tthis._disposers.splice(index, 1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ttarget.dispose();\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Makes a copy of this object and returns the clone. Try to avoid cloning complex objects like chart, create new instances if you need them.\r\n\t *\r\n\t * @param   {string}  cloneId  An id to use for clone (if not set a unique id will be generated)\r\n\t * @returns {Object}           Clone\r\n\t */\r\n\tpublic clone<A extends this>(cloneId?: string): this {\r\n\t\tif (!cloneId) {\r\n\t\t\tcloneId = \"clone-\" + registry.getUniqueId();\r\n\t\t}\r\n\r\n\t\tlet newObject: this = new (<{ new(): A; }>this.constructor)();\r\n\t\tnewObject.cloneId = cloneId;\r\n\r\n\t\tnewObject.copyFrom(this);\r\n\r\n\t\t// add to clones list\r\n\t\t// this.clones.push(newObject); // moved this to copyFrom\r\n\r\n\r\n\t\treturn newObject;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a collection of object's clones.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return {Dictionary<string, this>} Clones\r\n\t */\r\n\tpublic get clones(): List<this> {\r\n\t\tif (!this._clones) {\r\n\t\t\tthis._clones = new List<this>();\r\n\t\t}\r\n\t\treturn this._clones;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from different element.\r\n\t *\r\n\t * @param {this} object Source element\r\n\t */\r\n\tpublic copyFrom(object: this): void {\r\n\t\tobject.clones.moveValue(this);\r\n\t\tthis.clonedFrom = object;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's class name. (a class that was used to instantiate the element)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {string}  value  Class name\r\n\t */\r\n\tpublic set className(value: $type.Optional<string>) {\r\n\t\tthis._className = value;\r\n\t\t/*if (registry) {\r\n\t\t\tregistry.registeredClasses[value] = typeof this;\r\n\t\t}*/\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return {string} Class name\r\n\t */\r\n\tpublic get className(): $type.Optional<string> {\r\n\t\treturn this._className;\r\n\t}\r\n\r\n\t/**\r\n\t * Caches value in object's cache.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {string}  key    Key\r\n\t * @param {any}     value  Value\r\n\t * @param {number}  ttl    TTL in seconds\r\n\t */\r\n\tpublic setCache(key: string, value: any, ttl?: number): void {\r\n\t\tcache.set(this.uid, key, value, ttl);\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves cached value.\r\n\t *\r\n\t * If optional second padarameter is specified, it will return that value\r\n\t * if cache is not available or is expired.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}  key    Key\r\n\t * @param  {any}     value  Value to return if cache is not available\r\n\t * @return {any}            Value\r\n\t */\r\n\tpublic getCache(key: string, value: any = undefined): any {\r\n\t\treturn cache.get(this.uid, key, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Clears object's local cache.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic clearCache(): void {\r\n\t\tcache.clear(this.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates [[Disposer]] for `setTimeout` function call. This ensures that all\r\n\t * timeouts created by the object will be cleared when object itself is\r\n\t * disposed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {() => void}  fn     Callback function\r\n\t * @param  {number}      delay  Timeout (ms)\r\n\t * @return {IDisposer}          Disposer for timeout\r\n\t */\r\n\tpublic setTimeout(fn: () => void, delay: number): IDisposer {\r\n\t\tconst id = setTimeout(() => {\r\n\t\t\tthis.removeDispose(disposer);\r\n\t\t\tfn();\r\n\t\t}, delay);\r\n\r\n\t\tconst disposer = new Disposer(() => {\r\n\t\t\tclearTimeout(id);\r\n\t\t});\r\n\r\n\t\tthis._disposers.push(disposer);\r\n\t\treturn disposer;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates [[Disposer]] for `setInterval` function call. This ensures that all\r\n\t * timeouts created by the object will be cleared when object itself is\r\n\t * disposed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {() => void}  fn     Callback function\r\n\t * @param  {number}      delay  Timeout (ms)\r\n\t * @return {IDisposer}          Disposer for timeout\r\n\t */\r\n\tpublic setInterval(fn: () => void, delay: number): IDisposer {\r\n\t\tconst id = setInterval(() => {\r\n\t\t\tthis.removeDispose(disposer);\r\n\t\t\tfn();\r\n\t\t}, delay);\r\n\r\n\t\tconst disposer = new Disposer(() => {\r\n\t\t\tclearTimeout(id);\r\n\t\t});\r\n\r\n\t\tthis._disposers.push(disposer);\r\n\t\treturn disposer;\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * JSON-BASED CONFIG PROCESSING\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Use this property to set JSON-based config. When set, triggers processing\r\n\t * routine, which will go through all properties, and try to apply values,\r\n\t * create instances, etc.\r\n\t *\r\n\t * Use this with caution, as it is a time-consuming process. It's used for\r\n\t * initialchart setup only, not routine operations.\r\n\t *\r\n\t * @param {object} json JSON config\r\n\t */\r\n\tpublic set config(config: object) {\r\n\t\ttry {\r\n\t\t\tthis.processConfig(config);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\t/*if (this instanceof Sprite) {\r\n\t\t\t\tthis.raiseCriticalError(e);\r\n\t\t\t}*/\r\n\t\t\t(<any>this).raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the JSON config.\r\n\t *\r\n\t * @param {object}  json  JSON config\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected processConfig(config?: object): void {\r\n\r\n\t\tif (!config) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Get target\r\n\t\tlet target = <any>this;\r\n\r\n\t\t// Iterate through all of the items\r\n\t\t$object.eachOrdered(config, (configKey, value) => {\r\n\t\t\tlet configValue: any = value;\r\n\r\n\t\t\t// Is this a callback?\r\n\t\t\tif (configKey == \"callback\" && typeof value == \"function\") {\r\n\t\t\t\t(<any>value).call(target);\r\n\t\t\t}\r\n\r\n\t\t\t// Check if there's a property in target\r\n\t\t\tif (this.hasProperty(configKey)) {\r\n\r\n\t\t\t\tlet item: any;\r\n\r\n\t\t\t\t// Do we have instructions to create an object?\r\n\t\t\t\tif ($type.isObject(configValue) && $type.hasValue((<any>configValue)[\"type\"])) {\r\n\t\t\t\t\t// Create new instance\r\n\t\t\t\t\tif (item = this.createClassInstance((<any>configValue)[\"type\"])) {\r\n\t\t\t\t\t\ttarget[configKey] = item;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\titem = target[configKey];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Get item from the object\r\n\t\t\t\t\titem = target[configKey];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * It is...\r\n\t\t\t\t * --------------------------------------------------------------------\r\n\t\t\t\t */\r\n\r\n\t\t\t\tif (item instanceof Adapter) {\r\n\r\n\t\t\t\t\t// ... an Adapter, try to add handlers to it\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\tthis.processAdapters(item, configValue);\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (item instanceof EventDispatcher) {\r\n\r\n\t\t\t\t\t// ... an EventDispatcher, try to add handlers to it\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\tthis.processEvents(item, configValue);\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.asIs(configKey)) {\r\n\r\n\t\t\t\t\t// ... a special field, just set it to new value\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\t// (no need to add each indvidual item)\r\n\t\t\t\t\ttarget[configKey] = configValue;\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (<any>configValue instanceof BaseObject) {\r\n\r\n\t\t\t\t\t// ... a BaseObject object, we just going to use it as it is\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\ttarget[configKey] = configValue;\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (item instanceof BaseObject) {\r\n\r\n\t\t\t\t\t// ... another child BaseObject\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\t// Let's just pass in config part in and let itself deal with it\r\n\t\t\t\t\titem.config = configValue;\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (item instanceof ListTemplate) {\r\n\r\n\t\t\t\t\t// ... a list with template\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\t// Let's see what we can do with it\r\n\t\t\t\t\tif ($type.isArray(configValue)) {\r\n\r\n\t\t\t\t\t\t// It's an array.\r\n\t\t\t\t\t\t// Create a list item for entry, or try to apply properties to an\r\n\t\t\t\t\t\t// existing entry if possible and it is present.\r\n\t\t\t\t\t\t$array.each(configValue, (entry, index) => {\r\n\t\t\t\t\t\t\tlet type = this.getConfigEntryType(entry);\r\n\t\t\t\t\t\t\tlet listItem;\r\n\t\t\t\t\t\t\tif (item.hasIndex(index) && !entry[\"forceCreate\"]) {\r\n\t\t\t\t\t\t\t\tlistItem = item.getIndex(index);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if (<any>entry instanceof BaseObject) {\r\n\t\t\t\t\t\t\t\t// Item is already a BaseObject, no need to process it further\r\n\t\t\t\t\t\t\t\titem.push(entry);\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if (type) {\r\n\t\t\t\t\t\t\t\tlistItem = item.create(type);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlistItem = item.create();\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ($type.isObject(entry)) {\r\n\r\n\t\t\t\t\t\t\t\t// If the list item is BaseObject, we just need to let it\r\n\t\t\t\t\t\t\t\t// deal if its own config\r\n\t\t\t\t\t\t\t\tif (listItem instanceof BaseObject) {\r\n\t\t\t\t\t\t\t\t\t(<any>listItem).config = entry;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if ($type.isObject(listItem) && $type.isObject(entry)) {\r\n\t\t\t\t\t\t\t\t\t$object.copyAllProperties(<Object>entry, <Object>listItem);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\titem.setIndex(item.indexOf(listItem), entry);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t// Truncate the list if it contains less items than the config\r\n\t\t\t\t\t\t// array\r\n\t\t\t\t\t\twhile (configValue.length > item.length) {\r\n\t\t\t\t\t\t\titem.pop();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.isObject(configValue)) {\r\n\t\t\t\t\t\t// It's a single oject.\r\n\t\t\t\t\t\t// Treat it as a template.\r\n\t\t\t\t\t\tif (<any>configValue instanceof BaseObject) {\r\n\t\t\t\t\t\t\t// Item is already a BaseObject, no need to process it further\r\n\t\t\t\t\t\t\titem.template = configValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (item.template instanceof BaseObject) {\r\n\t\t\t\t\t\t\t// Template is a BaseObject so we will just let its config\r\n\t\t\t\t\t\t\t// deal with the configuration\r\n\t\t\t\t\t\t\t(<any>item.template).config = configValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t$object.each(configValue, (entryKey, entryValue) => {\r\n\r\n\t\t\t\t\t\t\t\tlet listItem = (<any>item.template)[entryKey];\r\n\r\n\t\t\t\t\t\t\t\tif (listItem instanceof Adapter) {\r\n\t\t\t\t\t\t\t\t\tthis.processAdapters(listItem, entryValue);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if (listItem instanceof EventDispatcher) {\r\n\t\t\t\t\t\t\t\t\tthis.processEvents(listItem, entryValue);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if (listItem instanceof DictionaryTemplate) {\r\n\t\t\t\t\t\t\t\t\tthis.processDictionaryTemplate(listItem, entryValue);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if (item.template[entryKey] instanceof BaseObject) {\r\n\t\t\t\t\t\t\t\t\t// Template is a BaseObject. Let it deal with its own config.\r\n\t\t\t\t\t\t\t\t\t(<any>item.template[entryKey]).config = entryValue;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if ($type.isObject(entryValue) && $type.hasValue((<any>entryValue)[\"type\"])) {\r\n\t\t\t\t\t\t\t\t\tif (listItem = this.createClassInstance((<any>entryValue)[\"type\"])) {\r\n\t\t\t\t\t\t\t\t\t\tif (listItem instanceof BaseObject) {\r\n\t\t\t\t\t\t\t\t\t\t\tlistItem.config = entryValue;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\titem.template[entryKey] = listItem;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\titem.template[entryKey] = entryValue;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if (listItem instanceof List) {\r\n\t\t\t\t\t\t\t\t\t// It's List, process it\r\n\t\t\t\t\t\t\t\t\tthis.processList(entryValue, listItem);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t// Aything else. Just assing and be done with it.\r\n\t\t\t\t\t\t\t\t\titem.template[entryKey] = this.maybeColorOrPercent(entryValue);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\t// Something else?\r\n\t\t\t\t\t\t// Not sure what to do with it on a list - ignore\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (item instanceof List) {\r\n\r\n\t\t\t\t\t// ... a list\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\tthis.processList(configValue, item);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (item instanceof DictionaryTemplate) {\r\n\r\n\t\t\t\t\t// ... a dictionary with template\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\tthis.processDictionaryTemplate(item, configValue);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (item instanceof Dictionary) {\r\n\r\n\t\t\t\t\t// ... a dictionary\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.processDictionary(item, configValue);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (item instanceof Color || item instanceof Percent) {\r\n\r\n\t\t\t\t\t// ... it's a Color or Percent\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\t\t\t\t\ttarget[configKey] = this.maybeColorOrPercent(configValue);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if ($type.isObject(item) && $type.isObject(configValue)) {\r\n\r\n\t\t\t\t\t// ... a regular object\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\t$object.copyAllProperties(<Object>configValue, <Object>item);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\t// ... something else - probably a simple property or object\r\n\t\t\t\t\t// ------------------------------------------------------------------\r\n\r\n\t\t\t\t\t// Maybe convert to `Percent` or `Color`?\r\n\t\t\t\t\tconfigValue = this.maybeColorOrPercent(configValue);\r\n\r\n\t\t\t\t\t// Assign\r\n\t\t\t\t\ttarget[configKey] = configValue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}, this.configOrder);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Tries to detect if value is color or percent and converts to proper object\r\n\t * if necessary.\r\n\t *\r\n\t * Returns the same source value if no color/percent detected\r\n\t *\r\n\t * @param  {any}  value  Source value\r\n\t * @return {any}         Converted value\r\n\t */\r\n\tprotected maybeColorOrPercent(value: any): any {\r\n\t\tif ($type.isString(value)) {\r\n\t\t\tif (value.match(/^[0-9.\\-]+\\%$/)) {\r\n\t\t\t\treturn percent($type.toNumber(value));\r\n\t\t\t}\r\n\t\t\telse if (value.match(/^\\#[0-9abcdef]{3,}$/i)) {\r\n\t\t\t\treturn color(value);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\tprotected processAdapters(item: Adapter<any, any>, config: any): void {\r\n\t\tif ($type.isArray(config)) {\r\n\t\t\t$array.each(config, (entry: { key: string, callback: any, priority?: number }, index) => {\r\n\t\t\t\titem.add(entry.key, entry.callback, entry.priority || 0, this);\r\n\t\t\t});\r\n\t\t}\r\n\t\telse if ($type.isObject(config)) {\r\n\t\t\t$object.each(config, (key, entry) => {\r\n\t\t\t\tif (!item.has(key, entry)) {\r\n\t\t\t\t\titem.add(key, entry);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprotected processEvents(item: EventDispatcher<any>, config: any): void {\r\n\t\tif ($type.isObject(config)) {\r\n\t\t\t$object.each(config, (key, entry) => {\r\n\t\t\t\tif (!item.has(key, entry)) {\r\n\t\t\t\t\titem.on(key, entry);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\telse if ($type.isArray(config)) {\r\n\t\t\t$array.each(config, (entry: { type: string, callback: any }, index) => {\r\n\t\t\t\titem.on(entry.type, entry.callback, this);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON config for a [[DictionaryTemplate]] item.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {DictionaryTemplate<any, any>}  item    Item\r\n\t * @param {any}                           config  Config\r\n\t */\r\n\tprotected processDictionaryTemplate(item: DictionaryTemplate<any, any>, config: any): void {\r\n\r\n\t\t// We can only process object\r\n\t\t// Not sure what to do with other types - ignore\r\n\t\tif ($type.isObject(config)) {\r\n\r\n\t\t\t// Create an entry for each item, or override properties for\r\n\t\t\t// existing one.\r\n\t\t\t$object.each(config, (entryKey, entryValue) => {\r\n\t\t\t\tlet listItem;\r\n\r\n\t\t\t\t// Get existing one, or create a new one\r\n\t\t\t\tif (entryKey == \"template\") {\r\n\t\t\t\t\tlistItem = item.template;\r\n\t\t\t\t}\r\n\t\t\t\telse if (item.hasKey(entryKey)) {\r\n\t\t\t\t\tlistItem = item.getKey(entryKey);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlistItem = item.create(entryKey);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set data\r\n\t\t\t\tif (listItem instanceof BaseObject) {\r\n\t\t\t\t\tlistItem.config = entryValue;\r\n\t\t\t\t}\r\n\t\t\t\telse if ($type.isObject(listItem) && $type.isObject(entryValue)) {\r\n\t\t\t\t\t$object.copyAllProperties(<Object>entryValue, <Object>listItem);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlistItem.setKey(entryKey, entryValue);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON config for a [[Dictionary]] item.\r\n\t *\r\n\t * @todo Description\r\n\t * @param {Dictionary<any, any>}  item    Item\r\n\t * @param {any}                   config  Config\r\n\t */\r\n\tprotected processDictionary(item: Dictionary<any, any>, config: any): void {\r\n\r\n\t\t// We can only process object\r\n\t\t// Not sure what to do with other types - ignore\r\n\t\tif ($type.isObject(config)) {\r\n\r\n\t\t\t// Create an entry for each item, or override properties for\r\n\t\t\t// existing one.\r\n\t\t\t// @todo support for non-basic types\r\n\t\t\t$object.each(config, (entryKey, entryValue) => {\r\n\t\t\t\t\titem.setKey(entryKey, entryValue);\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes [[List]].\r\n\t *\r\n\t * @param {any}        configValue  Config value\r\n\t * @param {List<any>}  item         Item\r\n\t */\r\n\tprotected processList(configValue: any, item: List<any>): void {\r\n\r\n\t\t// Convert to array if necessary\r\n\t\tif (!$type.isArray(configValue)) {\r\n\t\t\tconfigValue = [configValue];\r\n\t\t}\r\n\r\n\t\t// It's an array\r\n\t\t// Create a list item for entry\r\n\t\tconst itemCount = item.length;\r\n\t\t$array.each(configValue, (entry, index) => {\r\n\r\n\t\t\tif ($type.isObject(entry)) {\r\n\r\n\t\t\t\t// An object.\r\n\t\t\t\t//\r\n\t\t\t\t// Let's see if we can instantiate a class out of it, or we need\r\n\t\t\t\t// to push it into list as it is.\r\n\t\t\t\t//\r\n\t\t\t\t// If there are items already at the specified index in the list,\r\n\t\t\t\t// apply properties rather than create a new one.\r\n\r\n\t\t\t\tlet listItem;\r\n\t\t\t\tif ((index < itemCount) && !(<any>entry)[\"forceCreate\"]) {\r\n\t\t\t\t\tlistItem = item.getIndex(index);\r\n\t\t\t\t}\r\n\t\t\t\telse if (<any>entry instanceof BaseObject) {\r\n\t\t\t\t\t// Item is already a BaseObject, no need to process it further\r\n\t\t\t\t\titem.push(entry);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlistItem = this.createEntryInstance(entry);\r\n\t\t\t\t\titem.push(listItem);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If the list item is BaseObject, we just need to let it\r\n\t\t\t\t// deal if its own config\r\n\t\t\t\tif (listItem instanceof BaseObject) {\r\n\t\t\t\t\t(<any>listItem).config = entry;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\t// Basic value.\r\n\t\t\t\t// Just push it into list, or override existing value\r\n\t\t\t\tif (item.hasIndex(index)) {\r\n\t\t\t\t\titem.setIndex(index, entry);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\titem.push(entry);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t\t// Truncate the list if it contains less items than the config\r\n\t\t// array\r\n\t\twhile (configValue.length > item.length) {\r\n\t\t\titem.pop();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}  a  Element 1\r\n\t * @param  {string}  b  Element 2\r\n\t * @return {Ordering}   Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// Language must come first, so it's all set up when the rest of the\r\n\t\t// elements are being instantiated\r\n\t\telse if (a == \"language\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (b == \"language\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if field should be just assigned as is, without any checking when\r\n\t * processing JSON config.\r\n\t *\r\n\t * Extending functions can override this function to do their own checks.\r\n\t *\r\n\t * @param  {string}   field  Field name\r\n\t * @return {boolean}         Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn $array.indexOf([\"locale\"], field) != -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a relevant class instance if such class definition exists.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}  className  Class name\r\n\t * @return {Object}             Instance\r\n\t */\r\n\tprotected createClassInstance(className: string): Object {\r\n\t\tif ($type.hasValue(registry.registeredClasses[className])) {\r\n\t\t\treturn new registry.registeredClasses[className]();\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a class instance for a config entry using it's type. (as set in\r\n\t * `type` property)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {any}  config  Config part\r\n\t * @return {any}          Instance\r\n\t */\r\n\tprotected createEntryInstance(config: any): any {\r\n\t\tlet res: Object;\r\n\t\tif ($type.hasValue(config[\"type\"])) {\r\n\t\t\tres = this.createClassInstance(config[\"type\"]);\r\n\t\t}\r\n\t\tif (!res) {\r\n\t\t\treturn config;\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Determines config object type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {any}  config  Config part\r\n\t * @return {any}          Type\r\n\t */\r\n\tprotected getConfigEntryType(config: any): any {\r\n\t\tif ($type.hasValue(config[\"type\"])) {\r\n\t\t\tif ($type.hasValue(registry.registeredClasses[config[\"type\"]])) {\r\n\t\t\t\treturn registry.registeredClasses[config[\"type\"]];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthrow Error(\"Invalid type: \\\"\" + config[\"type\"] + \"\\\".\");\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if this element has a property.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param  {string}   prop  Property name\r\n\t * @return {boolean}        Has property?\r\n\t */\r\n\tprotected hasProperty(prop: string): boolean {\r\n\t\treturn prop in this ? true : false;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[BaseObjectEvents]].\r\n */\r\nexport interface IBaseObjectEvents { };\r\n\r\n/**\r\n * A version of [[BaseObject]] with events properties and methods.\r\n * Classes that use [[EventDispatcher]] should extend this instead of\r\n * [[BaseObject]] directly.\r\n */\r\nexport class BaseObjectEvents extends BaseObject {\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"BaseObjectEvents\";\r\n\t\tthis._disposers.push(this.events);\r\n\t}\r\n\r\n\tpublic _events!: IBaseObjectEvents;\r\n\r\n\t/**\r\n\t * An [[EventDispatcher]] instance\r\n\t */\r\n\tpublic events: EventDispatcher<AMEvent<this, this[\"_events\"]>> = new EventDispatcher();\r\n\r\n\t/**\r\n\t * Dispatches an event using own event dispatcher. Will automatically\r\n\t * populate event data object with event type and target (this element).\r\n\t * It also checks if there are any handlers registered for this sepecific\r\n\t * event.\r\n\t *\r\n\t * @param {Key} eventType Event type (name)\r\n\t * @param {any}    data      Data to pass into event handler(s)\r\n\t */\r\n\tpublic dispatch<Key extends keyof this[\"_events\"]>(eventType: Key, data?: any): void {\r\n\t\t// @todo Implement proper type check\r\n\t\tif (this.events.isEnabled(eventType)) {\r\n\t\t\tif (data) {\r\n\t\t\t\tdata.type = eventType;\r\n\t\t\t\tdata.target = data.target || this;\r\n\t\t\t\t(<any>this.events).dispatch(eventType, {\r\n\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\ttarget: this\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t(<any>this.events).dispatch(eventType, {\r\n\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\ttarget: this\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Works like `dispatch`, except event is triggered immediately, without\r\n\t * waiting for the next frame cycle.\r\n\t *\r\n\t * @param {Key} eventType Event type (name)\r\n\t * @param {any}    data      Data to pass into event handler(s)\r\n\t */\r\n\tpublic dispatchImmediately<Key extends keyof this[\"_events\"]>(eventType: Key, data?: any): void {\r\n\t\t// @todo Implement proper type check\r\n\t\tif (this.events.isEnabled(eventType)) {\r\n\t\t\tif (data) {\r\n\t\t\t\tdata.type = eventType;\r\n\t\t\t\tdata.target = data.target || this;\r\n\t\t\t\t(<any>this.events).dispatchImmediately(eventType, data);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t(<any>this.events).dispatchImmediately(eventType, {\r\n\t\t\t\t\ttype: eventType,\r\n\t\t\t\t\ttarget: this\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param {BaseObjectEvents} source Source object\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.events.copyFrom(source.events);\r\n\t}\r\n\r\n}\r\n"]}