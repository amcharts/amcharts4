{"version":3,"file":"DataLoader.js","sourceRoot":"","sources":["../../../../../src/.internal/core/data/DataLoader.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Data Loader is responsible for loading and parsing external data\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { DataSource } from \"./DataSource\";\r\nimport { DataParser } from \"./DataParser\";\r\nimport { CSVParser } from \"./CSVParser\";\r\nimport { JSONParser } from \"./JSONParser\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport * as $net from \"../utils/Net\";\r\n\r\n/**\r\n * Represents a list of available adapters for Sprite\r\n */\r\nexport interface IDataLoaderAdapters {\r\n\r\n\t/**\r\n\t * Applied after the Data Loader determines suitable parser type by data\r\n\t * source's URL extension.\r\n\t */\r\n\tgetParserByType: {\r\n\t\tparser: DataParser,\r\n\t\ttype?: string\r\n\t},\r\n\r\n\t/**\r\n\t * Applied after the Data Loader determines suitable parser type based on\r\n\t * its data examination.\r\n\t */\r\n\tgetParserByData: {\r\n\t\tparser: DataParser,\r\n\t\tdata?: string,\r\n\t\ttype?: string\r\n\t}\r\n\r\n};\r\n\r\n/**\r\n * Data Loader is responsible for loading and parsing external data.\r\n *\r\n * There is just one instance of DataLoader per system. Unless you have a\r\n * speicific reason, do not instantiate additional instances.\r\n *\r\n * The global instance of Data Loader is accessible via:\r\n *\r\n * ```TypeScript\r\n * am4core.dataLoader;\r\n * ```\r\n * ```JavaScript\r\n * am4core.dataLoader;\r\n * ```\r\n *\r\n * A loading of specific data source is done via [[DataSource]].\r\n *\r\n \t Please refer to [[DataSource]] for information how to use it.\r\n *\r\n * @see {@link IDataLoaderAdapters} for a list of available Adapters\r\n */\r\nexport class DataLoader {\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IExportAdapters}\r\n\t */\r\n\tpublic _adapter!: IDataLoaderAdapters;\r\n\r\n\t/**\r\n\t * Adapter.\r\n\t *\r\n\t * @type {Adapter<DataLoader, IDataLoaderAdapters>}\r\n\t */\r\n\tpublic adapter: Adapter<DataLoader, IDataLoaderAdapters> = new Adapter<DataLoader, IDataLoaderAdapters>(this);\r\n\r\n\t/**\r\n\t * Loads a supplied [[DataSource]] or an array of data sources, then calls\r\n\t * their respective `parse` methods.\r\n\t *\r\n\t * @param  {DataSource | DataSource[]}  source  A single data source or an array of multiple of data sources\r\n\t */\r\n\tpublic load(source: DataSource | DataSource[]): void {\r\n\t\tlet sources = Array.isArray(source) ? source : [source];\r\n\t\tlet promises = [];\r\n\r\n\t\t// Add each Source to the list to be loaded simultaneously\r\n\t\tfor (let x in sources) {\r\n\r\n\t\t\t// Dispatch events\r\n\t\t\tsources[x].dispatchImmediately(\"started\");\r\n\t\t\tsources[x].dispatchImmediately(\"loadstarted\");\r\n\r\n\t\t\tpromises.push($net.load(sources[x].url, sources[x], sources[x].requestOptions));\r\n\t\t}\r\n\r\n\t\t// Run all promises in parallel\r\n\t\tPromise.all(promises).then((res) => {\r\n\r\n\t\t\t// Process each loaded source\r\n\t\t\tfor (let x in res) {\r\n\r\n\t\t\t\t// Get Source\r\n\t\t\t\tlet result = res[x];\r\n\t\t\t\tlet source = result.target;\r\n\r\n\r\n\t\t\t\t// Dispatch events\r\n\t\t\t\tsource.dispatchImmediately(\"loadended\");\r\n\r\n\t\t\t\tif (result.error) {\r\n\t\t\t\t\tif (source.events.isEnabled(\"error\")) {\r\n\t\t\t\t\t\tsource.events.dispatchImmediately(\"error\", {\r\n\t\t\t\t\t\t\ttype: \"error\",\r\n\t\t\t\t\t\t\tcode: result.xhr.status,\r\n\t\t\t\t\t\t\tmessage: source.language.translate(\"Unable to load file: %1\", null, source.url),\r\n\t\t\t\t\t\t\ttarget: source\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\t// Initiate parsing of the loaded data\r\n\t\t\t\t\tsource.processData(result.response, result.type);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsource.dispatchImmediately(\"ended\");\r\n\r\n\t\t\t}\r\n\t\t}).catch((res) => {\r\n\r\n\t\t\tif (res.target) {\r\n\r\n\t\t\t\tres.target.dispatchImmediately(\"loadended\");\r\n\r\n\t\t\t\tif (res.target.events.isEnabled(\"error\")) {\r\n\t\t\t\t\tres.target.events.dispatchImmediately(\"error\", {\r\n\t\t\t\t\t\ttype: \"error\",\r\n\t\t\t\t\t\tcode: res.xhr.status,\r\n\t\t\t\t\t\tmessage: res.target.language.translate(\"Unable to load file: %1\", null, res.target.url),\r\n\t\t\t\t\t\ttarget: res.target\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tres.target.dispatchImmediately(\"ended\");\r\n\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Instantiates a [[DataParser]] object based on the data type.\r\n\t * Built-in parser types are as follows:\r\n\t *\r\n\t * * \"csv\" or \"text/csv\"\r\n\t * * \"json\" or \"application/json\"\r\n\t *\r\n\t * @param  {string}      contentType  A format type\r\n\t * @return {DataParser}               A parser object\r\n\t */\r\n\tpublic getParserByType(contentType: string): DataParser {\r\n\r\n\t\t// Let some plugin decide\r\n\t\tlet parser;\r\n\t\tif (parser = this.adapter.apply(\"getParserByType\", {\r\n\t\t\tparser: null,\r\n\t\t\ttype: contentType\r\n\t\t}).parser) {\r\n\t\t\treturn parser;\r\n\t\t}\r\n\r\n\t\tif (contentType == \"csv\" || contentType == \"text/csv\" || contentType == \"application/vnd.ms-excel\") {\r\n\t\t\treturn new CSVParser();\r\n\t\t}\r\n\t\tif (contentType == \"json\" || contentType == \"application/json\") {\r\n\t\t\treturn new JSONParser();\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Tries to determine a parser out of content type and/or actual data.\r\n\t *\r\n\t * @param  {string}      data         Data\r\n\t * @param  {string}      contentType  Content-type\r\n\t * @return {DataParser}               Parser instance\r\n\t */\r\n\tpublic getParserByData(data: string, contentType?: string): DataParser {\r\n\r\n\t\t// Let some plugin decide\r\n\t\tlet parser = this.adapter.apply(\"getParserByData\", {\r\n\t\t\tparser: null,\r\n\t\t\tdata: data,\r\n\t\t\ttype: contentType\r\n\t\t}).parser;\r\n\r\n\t\t// Check if we have parser from outside code\r\n\t\tif (!parser) {\r\n\r\n\t\t\t// No, let's try to figure it out\r\n\t\t\tif (parser = this.getParserByType(contentType)) {\r\n\t\t\t\t// We're able to figure out parser by conten-type\r\n\t\t\t\treturn parser;\r\n\t\t\t}\r\n\t\t\telse if (JSONParser.isJSON(data)) {\r\n\t\t\t\treturn this.getParserByType(\"json\");\r\n\t\t\t}\r\n\t\t\telse if (CSVParser.isCSV(data)) {\r\n\t\t\t\treturn this.getParserByType(\"csv\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn parser;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Create instance of Data Loader\r\n */\r\nexport let dataLoader: DataLoader = new DataLoader();\r\n"]}