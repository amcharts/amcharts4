{"version":3,"file":"RoundedRectangle.js","sourceRoot":"","sources":["../../../../../src/.internal/core/elements/RoundedRectangle.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Rounded rectangle module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"../Sprite\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RoundedRectangle]].\r\n */\r\nexport interface IRoundedRectangleProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * Radius of the top-left corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @type {number}\r\n\t */\r\n\tcornerRadiusTopLeft?: number;\r\n\r\n\t/**\r\n\t * Radius of the top-right corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @type {number}\r\n\t */\r\n\tcornerRadiusTopRight?: number;\r\n\r\n\t/**\r\n\t * Radius of the bottom-right corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @type {number}\r\n\t */\r\n\tcornerRadiusBottomRight?: number;\r\n\r\n\t/**\r\n\t * Radius of the bottom-left corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @type {number}\r\n\t */\r\n\tcornerRadiusBottomLeft?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RoundedRectangle]].\r\n */\r\nexport interface IRoundedRectangleEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RoundedRectangle]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRoundedRectangleAdapters extends ISpriteAdapters, IRoundedRectangleProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a rectangle with rounded corners.\r\n *\r\n * @see {@link IRoundedRectangleEvents} for a list of available events\r\n * @see {@link IRoundedRectangleAdapters} for a list of available Adapters\r\n */\r\nexport class RoundedRectangle extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t *\r\n\t * @type {IRoundedRectangleProperties}\r\n\t */\r\n\tpublic _properties!: IRoundedRectangleProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t *\r\n\t * @type {IRoundedRectangleAdapters}\r\n\t */\r\n\tpublic _adapter!: IRoundedRectangleAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t *\r\n\t * @type {IRoundedRectangleEvents}\r\n\t */\r\n\tpublic _events!: IRoundedRectangleEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RoundedRectangle\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\t//this.pixelPerfect = false;\r\n\r\n\t\tthis.cornerRadius(3, 3, 3, 3);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet w: number = this.innerWidth;\r\n\t\tlet h: number = this.innerHeight;\r\n\r\n\t\tif ($type.isNumber(w) && $type.isNumber(h)) {\r\n\t\t\tlet maxcr: number = $math.min(Math.abs(w / 2), Math.abs(h / 2));\r\n\t\t\tlet crtl: number = $math.fitToRange(this.cornerRadiusTopLeft, 0, maxcr);\r\n\t\t\tlet crtr: number = $math.fitToRange(this.cornerRadiusTopRight, 0, maxcr);\r\n\t\t\tlet crbr: number = $math.fitToRange(this.cornerRadiusBottomRight, 0, maxcr);\r\n\t\t\tlet crbl: number = $math.fitToRange(this.cornerRadiusBottomLeft, 0, maxcr);\r\n\r\n\t\t\tlet lineT: string = \"M\" + crtl + \",0 L\" + (w - crtr) + \",0\";\r\n\t\t\tlet lineB: string = \" L\" + crbl + \",\" + h;\r\n\t\t\tlet lineL: string = \" L0,\" + crtl;\r\n\t\t\tlet lineR: string = \" L\" + w + \",\" + (h - crbr);\r\n\r\n\t\t\tlet arcTR: string = \" a\" + crtr + \",\" + crtr + \" 0 0 1 \" + crtr + \",\" + crtr;\r\n\t\t\tlet arcBR: string = \" a\" + crbr + \",\" + crbr + \" 0 0 1 -\" + crbr + \",\" + crbr;\r\n\t\t\tlet arcBL: string = \" a\" + crbl + \",\" + crbl + \" 0 0 1 -\" + crbl + \",-\" + crbl;\r\n\t\t\tlet arcTL: string = \" a\" + crtl + \",\" + crtl + \" 0 0 1 \" + crtl + \",-\" + crtl;\r\n\r\n\r\n\t\t\tlet path: string = lineT + arcTR + lineR + arcBR + lineB + arcBL + lineL + arcTL + \" Z\";\r\n\r\n\t\t\tthis.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets radius for all four corners at ones.\r\n\t *\r\n\t * All numbers are in pixels.\r\n\t *\r\n\t * @param {number}  tl  Top-left corner\r\n\t * @param {number}  tr  Top-right corner\r\n\t * @param {number}  bl  Bottom-left corner\r\n\t * @param {number}  br  Bottom-right corner\r\n\t */\r\n\tpublic cornerRadius(tl: number, tr: number, bl: number, br: number) {\r\n\t\tthis.cornerRadiusTopLeft = tl;\r\n\t\tthis.cornerRadiusTopRight = tr;\r\n\t\tthis.cornerRadiusBottomLeft = bl;\r\n\t\tthis.cornerRadiusBottomRight = br;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the top-left corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @param {number}  value  Radius (px)\r\n\t */\r\n\tpublic set cornerRadiusTopLeft(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadiusTopLeft\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius (px)\r\n\t */\r\n\tpublic get cornerRadiusTopLeft(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadiusTopLeft\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the top-right corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @param {number}  value  Radius (px)\r\n\t */\r\n\tpublic set cornerRadiusTopRight(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadiusTopRight\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius (px)\r\n\t */\r\n\tpublic get cornerRadiusTopRight(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadiusTopRight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the bottom-right corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @param {number}  value  Radius (px)\r\n\t */\r\n\tpublic set cornerRadiusBottomRight(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadiusBottomRight\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius (px)\r\n\t */\r\n\tpublic get cornerRadiusBottomRight(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadiusBottomRight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the bottom-left corner in pixels.\r\n\t *\r\n\t * @default 3\r\n\t * @param {number}  value  Radius (px)\r\n\t */\r\n\tpublic set cornerRadiusBottomLeft(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadiusBottomLeft\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number} Radius (px)\r\n\t */\r\n\tpublic get cornerRadiusBottomLeft(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadiusBottomLeft\");\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\t\t\r\n\t}\t\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @type {IRectangle}\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\r\n\t\tif (this.isMeasured) {\r\n\t\t\treturn {\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.innerWidth,\r\n\t\t\t\theight: this.innerHeight\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, width: 0, height: 0 };\r\n\t\t}\r\n\t}\t\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RoundedRectangle\"] = RoundedRectangle;\r\n"]}