{"version":3,"file":"System.js","sourceRoot":"","sources":["../../../../src/.internal/core/System.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { registry } from \"./Registry\";\r\nimport { Sprite } from \"./Sprite\";\r\nimport { Container } from \"./Container\";\r\nimport { svgContainers, SVGContainer } from \"./rendering/SVGContainer\";\r\nimport { Component } from \"./Component\";\r\nimport { options } from \"./Options\";\r\nimport { Paper } from \"./rendering/Paper\";\r\nimport { raf } from \"./utils/AsyncPending\";\r\nimport { animations } from \"./utils/Animation\";\r\nimport { triggerIdle } from \"./utils/AsyncPending\";\r\nimport * as $dom from \"./utils/DOM\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $type from \"./utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * The main class that handles system-wide tasks, like caching, heartbeats, etc.\r\n * @important\r\n */\r\nexport class System {\r\n\t/**\r\n\t * A flag indicating if the system is on pause.\r\n\t *\r\n\t * @type {boolean}\r\n\t */\r\n\tprotected _isPaused: boolean = false;\r\n\r\n\t/**\r\n\t * Unique ID of the object.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tpublic uid: string = registry.getUniqueId();\r\n\r\n\t/**\r\n\t * amCharts Version.\r\n\t *\r\n\t * This follows npm's semver specification.\r\n\t *\r\n\t * @see {@link https://docs.npmjs.com/misc/semver}\r\n\t * @type {string}\r\n\t */\r\n\tstatic VERSION: string = \"4.0.13\";\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t * @todo Needed?\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic dummyCounter: number = 0;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t * @type {number}\r\n\t */\r\n\tpublic time: number;\r\n\r\n\r\n\tprotected _frameRequested: boolean = false;\r\n\r\n\tpublic updateStepDuration: number = 45;\r\n\r\n\t/**\r\n\t * Performs initialization of the System object.\r\n\t *\r\n\t * Called when the first [[Sprite]] object is created.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic constructor() {\r\n\t\tthis.time = Date.now();\r\n\t}\r\n\r\n\t/**\r\n\t * Reports time elapsed since timer was reset.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Needed?\r\n\t * @param {string}   msg    Message to report in console\r\n\t * @param {boolean}  reset  Reset time counter\r\n\t */\r\n\tpublic reportTime(msg: string, reset?: boolean): void {\r\n\t\tif (this.dummyCounter < 6) {\r\n\t\t\t//console.log(Date.now() - this.time, msg, this.dummyCounter2);\r\n\t\t}\r\n\t\tif (reset) {\r\n\t\t\tthis.time = Date.now();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs \"heartbeat\" operations `frameRate` number of times per second.\r\n\t *\r\n\t * When the chart element is invalidated, it is not immediately redrawn.\r\n\t *\r\n\t * Instead it waits for the next `update()` cycle to be re-validated.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Maybe should be private?\r\n\t */\r\n\tpublic update(): void {\r\n\r\n\t\tif (this._isPaused) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._frameRequested = false;\r\n\r\n\t\tlet time = Date.now();\r\n\r\n\t\tregistry.dispatchImmediately(\"enterframe\");\r\n\r\n\t\t//this.validateLayouts();\r\n\t\t//this.validatePositions();\r\n\t\t/*\r\n\t\t\t\tfor (let key in registry.invalidLayouts) {\r\n\t\t\t\t\tthis.validateLayouts(key);\r\n\t\t\t\t}\r\n\t\t\t\tfor (let key in registry.invalidPositions) {\r\n\t\t\t\t\tthis.validatePositions(key);\r\n\t\t\t\t}\r\n\t\t*/\r\n\r\n\t\tlet skippedComponents: Component[] = [];\r\n\r\n\t\t// data objects first - do all calculations\r\n\t\t// only data is parsed in chunks, thats why we do for loop instead of a while like with other invalid items.\r\n\t\t// important to go backwards, as items are removed!\r\n\t\t// TODO use iterator instead\r\n\r\n\t\tfor (var key in registry.invalidDatas) {\r\n\t\t\tlet invalidData = registry.invalidDatas[key];\r\n\r\n\t\t\twhile (invalidData.length > 0) {\r\n\t\t\t\tlet component: Component = invalidData[0];\r\n\t\t\t\tlet dataProvider: $type.Optional<Component> = component.dataProvider;\r\n\r\n\t\t\t\tif (!component.isDisposed()) {\r\n\r\n\t\t\t\t\tif (dataProvider && dataProvider.dataInvalid) {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tdataProvider.validateData();\r\n\t\t\t\t\t\t\tif (dataProvider.dataValidationProgress < 1) {\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (e) {\r\n\t\t\t\t\t\t\t$array.remove(invalidData, dataProvider);\r\n\t\t\t\t\t\t\tdataProvider.raiseCriticalError(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tcomponent.validateData();\r\n\t\t\t\t\t\t\tif (component.dataValidationProgress < 1) {\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch (e) {\r\n\t\t\t\t\t\t\t$array.remove(invalidData, component);\r\n\t\t\t\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t$array.remove(invalidData, component);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (Date.now() - time > this.updateStepDuration) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twhile (registry.invalidRawDatas.length > 0) {\r\n\t\t\tlet component: Component = registry.invalidRawDatas[0];\r\n\t\t\tif (!component.isDisposed()) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcomponent.validateRawData();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t$array.remove(registry.invalidRawDatas, component);\r\n\t\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$array.remove(registry.invalidRawDatas, component);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// TODO use iterator instead\r\n\t\twhile (registry.invalidDataItems.length > 0) {\r\n\t\t\tlet component: Component = registry.invalidDataItems[0];\r\n\r\n\t\t\tlet dataProvider: $type.Optional<Component> = component.dataProvider;\r\n\r\n\t\t\t// this is needed to avoid partial value validation when data is parsed in chunks\r\n\t\t\tif (component.isDisposed() || component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcomponent.validateDataItems();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t$array.remove(registry.invalidDataItems, component);\r\n\t\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// this might seem too much, as validateValues removes from invalidDataItems aswell, but just to be sure (in case validateData is overriden and no super is called)\r\n\t\t\t$array.remove(registry.invalidDataItems, component);\r\n\t\t}\r\n\r\n\t\t// TODO use iterator instead\r\n\t\twhile (registry.invalidDataRange.length > 0) {\r\n\t\t\tlet component: Component = registry.invalidDataRange[0];\r\n\r\n\t\t\tlet dataProvider: $type.Optional<Component> = component.dataProvider;\r\n\r\n\t\t\tif (component.isDisposed() || component.dataInvalid || (dataProvider && dataProvider.dataInvalid)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcomponent.validateDataRange();\r\n\t\t\t\t\tif (!component.skipRangeEvent) {\r\n\t\t\t\t\t\tcomponent.dispatchImmediately(\"datarangechanged\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcomponent.skipRangeEvent = false;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\t$array.remove(registry.invalidDataRange, component);\r\n\t\t\t\t\tcomponent.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// this might seem too much, as validateDataRange removes from invalidDataRange aswell, but just to be sure (in case validateData is overriden and no super is called)\r\n\t\t\t$array.remove(registry.invalidDataRange, component);\r\n\t\t}\r\n\r\n\t\tlet skippedSprites: Sprite[] = [];\r\n\r\n\t\t// display objects later\r\n\t\t// TODO use iterator instead\r\n\r\n\t\tfor (let key in registry.invalidLayouts) {\r\n\t\t\tthis.validateLayouts(key);\r\n\t\t}\r\n\t\tfor (let key in registry.invalidPositions) {\r\n\t\t\tthis.validatePositions(key);\r\n\t\t}\r\n\r\n\r\n\t\tlet hasSkipped: boolean = false;\r\n\r\n\t\ttime = Date.now();\r\n\r\n\t\tfor (var key in registry.invalidSprites) {\r\n\t\t\tlet count = 0;\r\n\r\n\t\t\tlet invalidSprites = registry.invalidSprites[key];\r\n\r\n\t\t\twhile (invalidSprites.length > 0) {\r\n\t\t\t\tthis.validateLayouts(key);\r\n\t\t\t\tthis.validatePositions(key);\r\n\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif (count == 5) {\r\n\t\t\t\t\tif (Date.now() - time > this.updateStepDuration) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcount = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet sprite: Sprite = invalidSprites[invalidSprites.length - 1];\r\n\r\n\t\t\t\t// we need to check this, as validateLayout might validate sprite\r\n\t\t\t\tif (sprite && !sprite.isDisposed()) {\r\n\t\t\t\t\tif (!this.checkIfValidate(sprite)) {\r\n\t\t\t\t\t\t// void\r\n\t\t\t\t\t\tskippedSprites.push(sprite);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (!this.checkIfValidate2(sprite)) {\r\n\t\t\t\t\t\t\t// void\r\n\t\t\t\t\t\t\tskippedSprites.push(sprite);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tif (sprite instanceof Container) {\r\n\t\t\t\t\t\t\t\t\tsprite.children.each((child) => {\r\n\t\t\t\t\t\t\t\t\t\tif (child.invalid) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (!this.checkIfValidate(child)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tskippedSprites.push(child);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\telse if (child.dataItem && child.dataItem.component && child.dataItem.component.dataInvalid) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tskippedSprites.push(child);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\t\tchild.validate();\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tsprite.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch (e) {\r\n\t\t\t\t\t\t\t\tsprite.invalid = false;\r\n\t\t\t\t\t\t\t\t$array.remove(invalidSprites, sprite);\r\n\t\t\t\t\t\t\t\tsprite.raiseCriticalError(e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// this might seem too much, but it's ok\r\n\t\t\t\t\tsprite.invalid = false;\r\n\t\t\t\t}\r\n\t\t\t\t$array.remove(invalidSprites, sprite);\r\n\t\t\t}\r\n\r\n\t\t\tregistry.invalidSprites[key] = registry.invalidSprites[key].concat(skippedSprites);\r\n\t\t}\r\n\r\n\t\tfor (var key in registry.invalidSprites) {\r\n\t\t\tif (registry.invalidSprites[key].length > 0) {\r\n\t\t\t\thasSkipped = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (var key in registry.invalidDatas) {\r\n\t\t\tif (registry.invalidDatas[key].length > 0) {\r\n\t\t\t\thasSkipped = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// TODO make this more efficient\r\n\t\t// TODO don't copy the array\r\n\t\t$array.each($array.copy(animations), (x) => {\r\n\t\t\tx.update();\r\n\t\t});\r\n\r\n\t\t//if(!hasSkipped){\r\n\t\tfor (let key in registry.invalidLayouts) {\r\n\t\t\tthis.validateLayouts(key);\r\n\t\t}\r\n\t\tfor (let key in registry.invalidPositions) {\r\n\t\t\tthis.validatePositions(key);\r\n\t\t}\r\n\t\t//}\r\n\r\n\t\ttriggerIdle();\r\n\r\n\t\tfor (let key in registry.invalidLayouts) {\r\n\t\t\tthis.validateLayouts(key);\r\n\t\t}\r\n\t\tfor (let key in registry.invalidPositions) {\r\n\t\t\tthis.validatePositions(key);\r\n\t\t}\r\n\r\n\r\n\t\tregistry.dispatchImmediately(\"exitframe\");\r\n\r\n\t\tif (hasSkipped || animations.length > 0 || skippedComponents.length > 0) {\r\n\t\t\tthis.requestFrame();\r\n\t\t}\r\n\r\n\t\tif (this.updateStepDuration < 200) {\r\n\t\t\tlet all0 = true;\r\n\r\n\t\t\tfor (var key in registry.invalidDatas) {\r\n\t\t\t\tif (registry.invalidDatas[key].length > 0) {\r\n\t\t\t\t\tall0 = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (var key in registry.invalidSprites) {\r\n\t\t\t\tif (registry.invalidSprites[key].length > 0) {\r\n\t\t\t\t\tall0 = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (all0) {\r\n\t\t\t\tthis.updateStepDuration = 200;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic checkIfValidate(sprite: Sprite): boolean {\r\n\t\tif (sprite instanceof Component && (sprite.dataInvalid || (sprite.dataProvider && sprite.dataProvider.dataInvalid))) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic checkIfValidate2(sprite: Sprite): boolean {\r\n\t\tif (sprite.dataItem && sprite.dataItem.component && sprite.dataItem.component.dataInvalid && !sprite.dataItem.component.isTemplate) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\t\r\n\r\n\t/**\r\n\t * Requests new animation frame\r\n\t */\r\n\tpublic requestFrame() {\r\n\t\tif (!this._frameRequested) {\r\n\r\n\t\t\traf(() => {\r\n\t\t\t\tthis.update();\r\n\t\t\t});\r\n\t\t\tthis._frameRequested = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers position re-validation on all [[Sprite]] elements that have\r\n\t * invalid(ated) positions.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Maybe should be private?\r\n\t */\r\n\tpublic validatePositions(id: string): void {\r\n\t\t// invalid positions\r\n\t\t// TODO use iterator instead\r\n\t\tlet invalidPositions = registry.invalidPositions[id];\r\n\r\n\t\twhile (invalidPositions.length > 0) {\r\n\t\t\tlet sprite: Sprite = invalidPositions[invalidPositions.length - 1];\r\n\t\t\tif (!sprite.isDisposed()) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (sprite instanceof Container) {\r\n\t\t\t\t\t\tsprite.children.each((sprite) => {\r\n\t\t\t\t\t\t\tif (sprite.positionInvalid) {\r\n\t\t\t\t\t\t\t\tsprite.validatePosition();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tsprite.validatePosition();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\tsprite.positionInvalid = false;\r\n\t\t\t\t\t$array.remove(invalidPositions, sprite);\r\n\t\t\t\t\tsprite.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$array.remove(invalidPositions, sprite);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers position re-validation on all [[Container]] elements that have\r\n\t * invalid(ated) layouts.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Maybe should be private?\r\n\t */\r\n\tpublic validateLayouts(id: string): void {\r\n\t\t// invalid positions\r\n\t\t// TODO use iterator instead\r\n\t\tlet invalidLayouts = registry.invalidLayouts[id];\r\n\t\twhile (invalidLayouts.length > 0) {\r\n\t\t\tlet container: Container = invalidLayouts[invalidLayouts.length - 1];\r\n\t\t\tif (!container.isDisposed()) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcontainer.children.each((sprite) => {\r\n\t\t\t\t\t\tif (sprite instanceof Container && sprite.layoutInvalid && !sprite.isDisposed()) {\r\n\t\t\t\t\t\t\tsprite.validateLayout();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tcontainer.validateLayout();\r\n\t\t\t\t}\r\n\t\t\t\tcatch (e) {\r\n\t\t\t\t\tcontainer.layoutInvalid = false;\r\n\t\t\t\t\t$array.remove(invalidLayouts, container);\r\n\t\t\t\t\tcontainer.raiseCriticalError(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$array.remove(invalidLayouts, container);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Outputs string to console if `verbose` is `true`.\r\n\t *\r\n\t * @param {any} value Message to output to console\r\n\t */\r\n\tpublic log(value: any): void {\r\n\t\tif (options.verbose) {\r\n\t\t\tif (console) {\r\n\t\t\t\tconsole.log(value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pauses all the processes of all the amCharts objects on the page\r\n\t *\r\n\t * @return {boolean} is paused?\r\n\t */\r\n\tpublic set isPaused(value: boolean) {\r\n\t\tthis._isPaused = value;\r\n\t\tif (!value) {\r\n\t\t\tthis._frameRequested = false;\r\n\t\t\tthis.requestFrame();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean} Is system on pause?\r\n\t */\r\n\tpublic get isPaused(): boolean {\r\n\t\treturn this._isPaused;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * A singleton global instance of [[System]].\r\n *\r\n * All code should use this, rather than instantiating their\r\n * own System objects.\r\n */\r\nexport const system: System = new System();\r\n"]}